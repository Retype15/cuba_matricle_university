from .plot_functions import *

def info_msg(msg):
    if msg: st.caption(f"‚ÑπÔ∏è {msg}")

def introduction():
    st.header("üéØ Bienvenidos al Coraz√≥n de la Educaci√≥n Superior Cubana")
    st.markdown("""
        La universidad no es solo un edificio; es un crisol de sue√±os, un motor de progreso y un reflejo
        de las aspiraciones de una sociedad. En este espacio, nos embarcaremos en un viaje anal√≠tico,
        explorando las corrientes que moldean la matr√≠cula universitaria en Cuba.
        
        Desde las tendencias generales hasta el detalle de cada carrera y universidad, desentra√±aremos
        las historias ocultas detr√°s de las distintas universidades del pa√≠s. ¬øEl objetivo? Proveer una br√∫jula basada en evidencia para
        la toma de decisiones estrat√©gicas, fomentando un sistema de educaci√≥n superior m√°s fuerte,
        equitativo y alineado con el futuro de la naci√≥n.

        **Utiliza el explorador en el panel lateral para navegar por las distintas secciones.** 
        ¬°Que comience el descubrimiento!
    """)
    st.success("¬°Tu viaje comienza aqu√≠! Selecciona una secci√≥n en el men√∫ lateral o usa el bot√≥n 'Siguiente'.")

def A1(df_main):
        st.header("üåç El Pulso Nacional: ¬øC√≥mo Late la Matr√≠cula Universitaria?")
        st.markdown("""
        Imagina que podemos tomarle el pulso a todo el sistema universitario cubano a lo largo de una d√©cada.
        ¬øC√≥mo ha sido su ritmo? ¬øHa experimentado momentos de vigoroso crecimiento, per√≠odos de estabilidad,
        o quiz√°s fases donde el latido se ha vuelto m√°s pausado?

        Este primer vistazo nos ofrece la perspectiva m√°s amplia, el electrocardiograma de la matr√≠cula total
        en nuestras universidades. Es el punto de partida esencial para comprender las din√°micas m√°s profundas
        que exploraremos a continuaci√≥n.
        """)
        
        # Llamamos a la funci√≥n de an√°lisis A1, solicitando solo la evoluci√≥n hist√≥rica
        with st.spinner("Construyendo la gr√°fica A2, por favor espere...", show_time=True):
            fig_a1, msg_a1 = analisis_A1( df_main, incluir_proyeccion=False) 
        
        if fig_a1:
            st.plotly_chart(fig_a1, use_container_width=True, key="fig_a1_pulso_nacional")
            if msg_a1: # Si hay alg√∫n mensaje de la funci√≥n (ej. sobre datos insuficientes)
                st.caption(f"‚ÑπÔ∏è {msg_a1}")
            
            st.subheader("Descifrando el Ritmo de la D√©cada (2015-2025):")
            st.markdown("""
            Observando la trayectoria de la matr√≠cula nacional total en el gr√°fico superior, podemos identificar varias fases clave:

            *   **Impulso Inicial (2015-16 a 2016-17):** El viaje comienza en el curso 2015-2016 con una cifra que ronda los **165,000 estudiantes**. Inmediatamente, en el siguiente curso (2016-2017), se aprecia un **salto significativo y vigoroso**, elevando la matr√≠cula hasta aproximadamente **220,000 estudiantes**. Este fue el mayor incremento interanual del per√≠odo.

            *   **Crecimiento Sostenido hacia la Cima (2017-18 a 2020-21):** Tras una ligera consolidaci√≥n en 2017-2018 (alrededor de **225,000**), la tendencia ascendente se retoma con fuerza. La matr√≠cula crece de forma constante, pasando por los **258,000** en 2019-2020, hasta alcanzar su **punto m√°s √°lgido en el curso 2020-2021, superando los 285,000 estudiantes**. Este representa el pico de matr√≠cula en la d√©cada analizada.

            *   **Meseta y Comienzo del Declive (2021-22 a 2022-23):** El curso 2021-2022 muestra una ligera contracci√≥n, manteniendo la matr√≠cula a√∫n por encima de los **280,000**. Sin embargo, es en el curso 2022-2023 donde se evidencia un cambio de tendencia m√°s claro, con una **disminuci√≥n m√°s notable** que sit√∫a la cifra en torno a los **263,000 estudiantes**.

            *   **Ajuste Reciente (2023-24 a 2024-25):** Los dos √∫ltimos cursos registrados muestran una **continuaci√≥n de la tendencia descendente**, siendo la ca√≠da m√°s pronunciada entre 2022-23 y 2023-24 (llegando a unos **218,000**). El curso 2024-2025 cierra con una matr√≠cula cercana a los **205,000 estudiantes**, indicando que, si bien la disminuci√≥n persiste, su ritmo parece haberse moderado en comparaci√≥n con el salto anterior.

            Esta panor√°mica general nos invita a preguntarnos: ¬øQu√© factores podr√≠an haber impulsado el crecimiento inicial? ¬øQu√© circunstancias podr√≠an explicar el cambio de tendencia y el declive posterior?
            Estas son preguntas que, aunque no podemos responder completamente solo con estos datos de matr√≠cula, nos preparan para los an√°lisis m√°s detallados que siguen.
            """)
        else:
            # Si msg_a1 ya fue generado por la funci√≥n, se muestra, sino un mensaje gen√©rico.
            st.warning(msg_a1 if msg_a1 else "No se pudo generar el gr√°fico del panorama nacional (A1).")

def A2(df_main):
    st.header("üìö Un Mosaico de Saberes: ¬øHacia D√≥nde se Inclinan los Futuros Profesionales?")
    st.markdown("""
    La universidad es un vasto jard√≠n donde florecen diversas disciplinas. Cada rama del conocimiento,
    desde las Ciencias M√©dicas o Matem√°ticas hasta las Artes, representa un camino √∫nico de formaci√≥n y contribuci√≥n
    a la sociedad. En esta secci√≥n, desglosamos la matr√≠cula total para ver c√≥mo se distribuyen
    los estudiantes entre estas grandes √°reas, con el objetivo de responder preguntascomo:
    - ¬øHay protagonistas claros?
    - ¬øC√≥mo ha danzado el inter√©s estudiantil a lo largo de la √∫ltima d√©cada?
    """)
    
    # Llamamos a la funci√≥n de an√°lisis A2, solicitando solo la evoluci√≥n hist√≥rica
    with st.spinner("Construyendo la gr√°fica A2, uno de los trabajadores se clav√≥ por accidente una espada en la rodilla...", show_time=True):
        fig_a2_abs, fig_a2_pct, msg_a2 = analisis_A2( df_main, incluir_proyeccion=False) 
    
    if fig_a2_abs:
        st.subheader("La Fuerza de Cada Rama: Evoluci√≥n Hist√≥rica de la Matr√≠cula")
        st.plotly_chart(fig_a2_abs, use_container_width=True, key="fig_a2_abs_mosaico")
        st.markdown("""
        **Cada L√≠nea, una Corriente del Conocimiento:**
        Este gr√°fico traza el viaje de la matr√≠cula absoluta (n√∫mero total de estudiantes) para cada rama de ciencias a lo largo de los a√±os.

        *   **Liderazgo Destacado:** Las **Ciencias M√©dicas** (l√≠nea verde agua) se erigen como la rama con la matr√≠cula m√°s numerosa de forma consistente durante todo el per√≠odo, partiendo de unos 70,000 estudiantes en 2015-16, alcanzando un pico impresionante cercano a los **95,000 estudiantes en 2020-2021**, y aunque experimentan un descenso posterior, se mantienen como la principal fuerza, cerrando en 2024-2025 con m√°s de 70,000 estudiantes.

        *   **Persecuci√≥n y Dinamismo:** Las **Ciencias Pedag√≥gicas** (l√≠nea naranja) muestran una trayectoria muy din√°mica. Comienzan con una matr√≠cula significativa (alrededor de 30,000), experimentan un crecimiento notable hasta superar los **65,000 estudiantes en 2020-2021 y 2021-2022**, convirti√©ndose en la segunda rama m√°s grande durante esos a√±os. Sin embargo, sufren un declive pronunciado en los √∫ltimos cursos, finalizando cerca de los 40,000 estudiantes.

        *   **Bloque Intermedio Consistente:** Un grupo de ramas mantiene una presencia estable aunque con fluctuaciones:
            *   Las **Ciencias T√©cnicas** (l√≠nea rosa) y las **Ciencias Sociales y Human√≠sticas** (l√≠nea celeste) muestran trayectorias paralelas, creciendo desde aproximadamente 20,000 estudiantes hasta un pico alrededor de los **30,000-32,000** entre 2020-21 y 2021-22, para luego descender y situarse en torno a los 23,000-25,000 estudiantes al final del per√≠odo.
            *   Las **Ciencias Econ√≥micas** (l√≠nea roja) presentan un crecimiento m√°s moderado pero constante hasta 2021-22 (alcanzando unos 24,000 estudiantes), seguido de un descenso similar a otras ramas, terminando cerca de los 15,000.
            *   Las **Ciencias Agropecuarias** (l√≠nea azul oscuro) y las **Ciencias de la Cultura F√≠sica y el Deporte** (l√≠nea verde oscuro/marr√≥n) se mantienen en un rango m√°s bajo, generalmente entre 5,000 y 15,000 estudiantes, con picos alrededor de 2020-2021 y descensos posteriores.

        *   **Nicho Especializado:** Las **Ciencias Naturales y Matem√°ticas** (l√≠nea morada) y las **Ciencias de las Artes** (l√≠nea violeta) representan las ramas con menor volumen de matr√≠cula, manteni√©ndose consistentemente por debajo de los 5,000 estudiantes a lo largo de toda la d√©cada. Esto sugiere una alta especializaci√≥n o una demanda m√°s acotada.
        """)
    else:
        st.warning("No se pudo generar el gr√°fico de evoluci√≥n absoluta por rama (A2).")

    if fig_a2_pct:
        st.subheader("El Reparto del Pastel Acad√©mico: Distribuci√≥n Porcentual Hist√≥rica")
        st.plotly_chart(fig_a2_pct, use_container_width=True, key="fig_a2_pct_mosaico")
        st.markdown("""
        **Proporciones en el Lienzo Universitario:**
        Este gr√°fico de √°rea apilada nos muestra qu√© "porci√≥n del pastel" ha representado cada rama de ciencias dentro del total de la matr√≠cula universitaria en cada curso acad√©mico.

        *   **Dominio Persistente de las Ciencias M√©dicas:** La ancha banda verde agua en la parte superior confirma que las Ciencias M√©dicas han representado consistentemente la mayor proporci√≥n de estudiantes, ocupando cerca del **40-50% del total** en su punto m√°s alto (alrededor de 2016-17 y nuevamente hacia 2024-2025, tras una ligera reducci√≥n porcentual a mediados del per√≠odo).

        *   **Ascenso y Descenso de las Ciencias Pedag√≥gicas:** La banda naranja de las Ciencias Pedag√≥gicas muestra un interesante cambio en su peso relativo. Comienza siendo una porci√≥n importante, se expande significativamente hasta representar la segunda mayor proporci√≥n (llegando a casi un **25-30%** del total alrededor de 2019-2021), pero luego reduce su participaci√≥n porcentual en los √∫ltimos a√±os.

        *   **Estabilidad Relativa en el Medio:** Las Ciencias T√©cnicas (banda marr√≥n/ocre), Sociales y Human√≠sticas (banda celeste) y Econ√≥micas (banda azul oscuro) mantienen proporciones m√°s estables a lo largo del tiempo, aunque con ligeras variaciones. Juntas, suelen conformar una porci√≥n significativa del estudiantado. Por ejemplo, las Ciencias Sociales y Human√≠sticas parecen ocupar consistentemente alrededor del 10-15%.

        *   **Menor Peso Porcentual:** Las dem√°s ramas (Agropecuarias, Cultura F√≠sica, Naturales y Matem√°ticas, Artes) representan individualmente porcentajes menores del total de la matr√≠cula, lo que es coherente con su menor volumen absoluto de estudiantes.

        Este an√°lisis porcentual es crucial porque nos permite entender no solo cu√°ntos estudiantes hay en cada rama, sino tambi√©n c√≥mo se distribuye el inter√©s o la capacidad de admisi√≥n en relaci√≥n con el conjunto del sistema universitario.
        """)
    else:
        st.warning("No se pudo generar el gr√°fico de distribuci√≥n porcentual por rama (A2).")
        
    if msg_a2: # Si la funci√≥n A2 retorn√≥ alg√∫n mensaje adicional
        st.caption(f"‚ÑπÔ∏è {msg_a2}")

def A3_analisis(df_main):
    st.header("üîç Carreras Bajo la Lupa: Popularidad, Tendencias y Dinamismo")
    st.markdown("""
    Tras explorar las grandes ramas del saber, es momento de enfocar nuestra lente en las unidades
    fundamentales: las carreras universitarias. ¬øCu√°les son las que capturan el mayor inter√©s estudiantil?
    ¬øC√≥mo ha sido su evoluci√≥n individual? Y, muy importante, ¬øcu√°les muestran un crecimiento
    acelerado y cu√°les parecen estar perdiendo impulso?
    """)
        
    # --- Subsecci√≥n: El Podio de las Carreras ---
    st.subheader("üèÜ El Podio de las Carreras: ¬øCu√°les Lideran la Matr√≠cula Actual?")
    st.markdown(f"""
    A la izquierda observamos el ranking de todas las carreras seg√∫n su matr√≠cula total en el curso m√°s reciente
    ({df_main['Ano_Inicio_Curso'].max()}-{df_main['Ano_Inicio_Curso'].max()+1}). A la derecha, vemos la evoluci√≥n hist√≥rica de la matr√≠cula
    para las 10 carreras que actualmente se encuentran en la cima de este ranking.
    """)
    with st.spinner("Construyendo la gr√°fica A3, nos esforzamos para que reciba su gr√°fica cuanto antes...", show_time=True): # Elimin√© df_main.copy()
        fig_a3_evolucion, df_ranking_completo_a3, _, msg_a3 = analisis_A3(df_main)
    # Nota: La funci√≥n analisis_A3 fue modificada para retornar el ranking completo y la figura de evoluci√≥n de las top N.
    
    col_ranking, col_evolucion_top = st.columns([1, 2]) # Ajusta la proporci√≥n si es necesario

    with col_ranking:
        if df_ranking_completo_a3 is not None and not df_ranking_completo_a3.empty:
            st.dataframe(df_ranking_completo_a3, height=500) # Muestra el ranking completo
        else:
            st.info("No hay datos de ranking de carreras para mostrar.")
    
    with col_evolucion_top:
        if fig_a3_evolucion:
            st.plotly_chart(fig_a3_evolucion, use_container_width=True, key="fig_a3_lupa_evolucion")
        else:
            st.info("No se gener√≥ gr√°fico de evoluci√≥n para las carreras top actuales.")
    
    info_msg(msg_a3)

    st.markdown("""
    **Puntos Clave del Podio:**
    *   **Liderazgo Indiscutible:** **Medicina** se posiciona firmemente como la carrera con la mayor matr√≠cula (35,889 estudiantes), una constante que ya hab√≠amos vislumbrado al analizar las ramas del saber.
    *   **Fuerzas Significativas:** Le siguen **Cultura F√≠sica** (14,695) y **Educaci√≥n Primaria** (12,867), demostrando una demanda considerable en estas √°reas.
    *   **Top 5 Robusto:** **Enfermer√≠a** (9,999) y **Contabilidad y Finanzas** (9,883) completan el top 5, ambas con una matr√≠cula muy cercana a los 10,000 estudiantes.
    *   **Evoluci√≥n de las L√≠deres:** El gr√°fico de la derecha nos permite ver c√≥mo estas carreras (y otras del top 10) han llegado a su posici√≥n actual. Observa c√≥mo algunas han tenido un crecimiento m√°s sostenido, mientras otras muestran picos y valles m√°s pronunciados.
    """)
    st.markdown("---")

    # --- Subsecci√≥n: El Ritmo del Cambio (CAGR) ---
    st.subheader("üöÄ El Ritmo del Cambio: ¬øQu√© Carreras Despegan o Aterrizan?")
    st.markdown("""
    La **Tasa de Crecimiento Anual Compuesto (CAGR)** nos ofrece una perspectiva del dinamismo.
    Calcula el crecimiento (o decrecimiento) porcentual promedio de la matr√≠cula de una carrera cada a√±o,
    considerando todo el per√≠odo analizado (2015-2024). Un CAGR alto sugiere una expansi√≥n r√°pida.
    """)
    with st.spinner("Construyendo la gr√°fica A6, los trabajadores est√°n en horario de chismes...", show_time=True): # Elimin√© df_main.copy()
        fig_a6_top_cagr, fig_a6_bottom_cagr, msg_a6 = analisis_A6(df_main)
    
    col_cagr_top, col_cagr_bottom = st.columns(2)

    with col_cagr_top:
        if fig_a6_top_cagr:
            st.markdown("üìà **Top 15 Carreras con Mayor Crecimiento Promedio Anual**")
            st.plotly_chart(fig_a6_top_cagr, use_container_width=True, key="fig_a6_top_lupa_cagr")
            st.markdown("""
            Estas carreras han experimentado la expansi√≥n m√°s notable en su matr√≠cula promedio anual.
            *   **Sorprendente Despegue:** **Servicios Estomatol√≥gicos** lidera con un CAGR superior al 100%, lo que indica una duplicaci√≥n (o m√°s) de su matr√≠cula promedio a√±o tras a√±o.
            *   **Ingenier√≠as en Auge:** Varias ingenier√≠as como **Art√≠stica**, **Procesos Agroindustriales** e **Inform√°tica** muestran un crecimiento muy saludable.
            *   **Educaci√≥n con Impulso:** Ramas de la educaci√≥n como **Preescolar**, **Agropecuaria** y **Primaria** tambi√©n figuran con un CAGR positivo y significativo.
            """)
        else:
            st.info("No se pudo generar el gr√°fico de carreras con mayor CAGR.")
    
    with col_cagr_bottom:
        if fig_a6_bottom_cagr:
            st.markdown("üìâ **Top 15 Carreras con Menor Crecimiento o Mayor Decrecimiento Promedio Anual**")
            st.plotly_chart(fig_a6_bottom_cagr, use_container_width=True, key="fig_a6_bottom_lupa_cagr")
            st.markdown("""
            En el otro extremo, estas carreras han visto su matr√≠cula promedio anual disminuir o crecer a un ritmo mucho menor.
            *   **Ajustes Notables:** **Estudios Socioculturales** y **Estomatolog√≠a** (no confundir con Servicios Estomatol√≥gicos) presentan los mayores decrecimientos promedio.
            *   **Desaf√≠os Diversos:** Carreras como **Ingenier√≠a Agr√≠cola**, **Artes Visuales**, **Matem√°tica**, **M√∫sica** y varias **Ingenier√≠as** (Hidr√°ulica, Civil, Telecomunicaciones, Industrial) tambi√©n aparecen en esta lista, sugiriendo una revisi√≥n de sus tendencias.
            """)
        else:
            st.info("No se pudo generar el gr√°fico de carreras con menor CAGR.")

    if msg_a6: st.caption(f"‚ÑπÔ∏è {msg_a6}")
    
    st.markdown("""
    **Reflexiones Estrat√©gicas a partir de estos Ritmos:**
    *   Un **alto CAGR** no siempre significa una matr√≠cula total masiva (podr√≠a ser una carrera peque√±a creciendo r√°pido), pero s√≠ indica una **tendencia positiva fuerte** que merece atenci√≥n, ya sea para fomentar o para asegurar recursos.
    *   Un **CAGR bajo o negativo** en carreras importantes podr√≠a ser una se√±al para investigar las causas: ¬øcambios en el mercado laboral, preferencias estudiantiles, oferta acad√©mica?
    *   Es crucial cruzar esta informaci√≥n de CAGR con la matr√≠cula absoluta (del ranking) para obtener una imagen completa.
    """)

def A3_playground(df_main):
    B1(df_main)

def A4(df_main):
    pass

def B1(df):
        st.header("üî¨ B1. Perfil Detallado de Carrera: Una Radiograf√≠a Completa")
        st.markdown("""
        Sum√©rgete en los detalles de la carrera que elijas. Descubre su evoluci√≥n hist√≥rica de matr√≠cula,
        incluyendo la composici√≥n por g√©nero, su tasa de crecimiento promedio en el per√≠odo que definas,
        y un panorama de las universidades que la imparten actualmente. ¬°Una visi√≥n 360¬∫ a tu alcance!
        """)

        todas_carreras_unicas = sorted(df['carrera'].unique())
        carrera_sel_b1 = st.selectbox(
            "Selecciona una Carrera para analizar su perfil:", 
            options=todas_carreras_unicas, 
            index=todas_carreras_unicas.index("MEDICINA") if "MEDICINA" in todas_carreras_unicas else 0,
            key="sel_carrera_b1_perfil_final"
        )

        if carrera_sel_b1:
            st.markdown("---")
            
            with st.spinner(f"Generando perfil para {carrera_sel_b1}..."):
                # Llamada a la funci√≥n de an√°lisis (ya no pasa a√±os CAGR)
                fig_b1_evol_gen, df_evol_para_cagr_b1, df_unis_b1, datos_genero_ultimo_ano_b1, rama_b1, msg_b1 = analisis_perfil_carrera(
                    df.copy(), 
                    carrera_sel_b1
                )
            
            st.subheader(f"Perfil Integral de: {carrera_sel_b1}")
            st.markdown(f"**Rama de Ciencias:** {rama_b1}")
            info_msg(msg_b1) # Mostrar cualquier mensaje de la funci√≥n

            # Mostrar el gr√°fico de evoluci√≥n de matr√≠cula y g√©nero primero
            if fig_b1_evol_gen:
                st.plotly_chart(fig_b1_evol_gen, use_container_width=True, key="fig_b1_perfil_evol_genero_final")
            else:
                st.warning("No se pudo generar el gr√°fico de evoluci√≥n para esta carrera.")

            st.markdown("---") # Separador antes de los controles CAGR y otros gr√°ficos

            # Controles para el CAGR (Slider) y muestra del CAGR
            if df_evol_para_cagr_b1 is not None and not df_evol_para_cagr_b1.empty:
                anos_disponibles_carrera_b1 = sorted(df_evol_para_cagr_b1['Ano_Inicio_Curso'].unique())
                if len(anos_disponibles_carrera_b1) >= 2:
                    st.markdown("**Crecimiento Promedio Anual (CAGR) para el Per√≠odo Seleccionado:**")
                    st.caption("El CAGR indica la tasa de crecimiento porcentual promedio por a√±o. Ajusta el slider para explorar diferentes per√≠odos.")
                    
                    selected_years_cagr = st.slider(
                        "Selecciona el rango de a√±os (inicio-fin) para el c√°lculo del CAGR:",
                        min_value=int(anos_disponibles_carrera_b1[0]),
                        max_value=int(anos_disponibles_carrera_b1[-1]),
                        value=(int(anos_disponibles_carrera_b1[0]), int(anos_disponibles_carrera_b1[-1])),
                        key=f"slider_cagr_dinamico_{carrera_sel_b1.replace(' ','_')}"
                    )
                    ano_inicio_cagr_sel = selected_years_cagr[0]
                    ano_fin_cagr_sel = selected_years_cagr[1]

                    if ano_inicio_cagr_sel < ano_fin_cagr_sel:
                        cagr_b1_info = calcular_cagr_dinamico(df_evol_para_cagr_b1, ano_inicio_cagr_sel, ano_fin_cagr_sel)
                        st.metric(
                            label=f"CAGR {cagr_b1_info.get('periodo', '')}", 
                            value=cagr_b1_info.get('valor', 'N/A')
                        )
                    else:
                        st.warning("El a√±o inicial del per√≠odo CAGR debe ser menor que el a√±o final para un c√°lculo v√°lido.")
                else:
                    st.info(f"No hay suficientes a√±os de datos para '{carrera_sel_b1}' para calcular un CAGR con per√≠odo seleccionable.")
            
            st.markdown("---")
            
            # M√©tricas de G√©nero y Gr√°fico de Pastel
            col_b1_genero_metric, col_b1_genero_pie = st.columns([1,1]) # Dos columnas para esto

            with col_b1_genero_metric:
                st.markdown(f"**Composici√≥n de G√©nero (Curso {df['Ano_Inicio_Curso'].max()}-{df['Ano_Inicio_Curso'].max()+1}):**")
                if datos_genero_ultimo_ano_b1 and datos_genero_ultimo_ano_b1.get('Total', 0) > 0:
                    porc_mujeres = (datos_genero_ultimo_ano_b1['Mujeres'] / datos_genero_ultimo_ano_b1['Total']) * 100
                    st.metric(label="Total Mujeres", value=f"{int(datos_genero_ultimo_ano_b1['Mujeres']):,}")
                    st.metric(label="Total Hombres", value=f"{int(datos_genero_ultimo_ano_b1['Hombres']):,}")
                else:
                    st.info("No hay datos de g√©nero disponibles para el √∫ltimo a√±o.")

            with col_b1_genero_pie:
                if datos_genero_ultimo_ano_b1 and datos_genero_ultimo_ano_b1.get('Total', 0) > 0:
                    df_pie_genero = pd.DataFrame({
                        'Genero': ['Mujeres', 'Hombres'],
                        'Cantidad': [datos_genero_ultimo_ano_b1['Mujeres'], datos_genero_ultimo_ano_b1['Hombres']]
                    })
                    fig_pie_genero = px.pie(df_pie_genero, values='Cantidad', names='Genero', 
                                            title=f"Distribuci√≥n de G√©nero en {carrera_sel_b1}:",
                                            color_discrete_map={'Mujeres':'lightpink', 'Hombres':'lightskyblue'})
                    fig_pie_genero.update_traces(textposition='inside', textinfo='percent+label')
                    st.plotly_chart(fig_pie_genero, use_container_width=True, key="pie_genero_b1")

            st.markdown("---")
            # Gr√°fico de Barras para Universidades
            if df_unis_b1 is not None and not df_unis_b1.empty:
                st.markdown(f"**Universidades que imparten '{carrera_sel_b1}' (Matr√≠cula en √∫ltimo curso):**")
                df_unis_b1_sorted = df_unis_b1.sort_values(by=f'Matr√≠cula {df["Ano_Inicio_Curso"].max()}-{df["Ano_Inicio_Curso"].max()+1}', ascending=True)
                fig_bar_unis = px.bar(
                    df_unis_b1_sorted, 
                    x=f'Matr√≠cula {df["Ano_Inicio_Curso"].max()}-{df["Ano_Inicio_Curso"].max()+1}', 
                    y='Universidad', 
                    orientation='h',
                    title=f"Distribuci√≥n por Universidad: {carrera_sel_b1}",
                    height=max(300, len(df_unis_b1_sorted) * 30) # Altura din√°mica
                )
                fig_bar_unis.update_layout(yaxis_title="Universidad", xaxis_title="Matr√≠cula")
                st.plotly_chart(fig_bar_unis, use_container_width=True, key="fig_b1_bar_unis_final")
            elif df_unis_b1 is not None and df_unis_b1.empty:
                 st.info(f"Ninguna universidad registr√≥ matr√≠cula para '{carrera_sel_b1}' en el √∫ltimo curso.")
            else:
                st.info("No se encontraron datos de universidades para esta carrera en el √∫ltimo a√±o.")
        else:
            st.info("Por favor, selecciona una Carrera para continuar.")

def B2(df_main, df_ins):
        st.header("üó∫Ô∏è B2. Gu√≠a de Instituciones: Explora la Oferta Acad√©mica por Localidad")
        st.markdown("""
        Descubre las instituciones de educaci√≥n superior en Cuba, filtrando por provincia y municipio.
        Para cada universidad, encontrar√°s informaci√≥n general, su composici√≥n de g√©nero, las ramas de ciencias
        que ofrece y las carreras disponibles con su matr√≠cula en el √∫ltimo a√±o acad√©mico registrado.
        """)

        if df_ins.empty:
            st.warning("Los datos de instituciones ('db_uni.parquet') no est√°n disponibles o est√°n vac√≠os. Esta secci√≥n no puede mostrarse.")
        else:
            st.markdown("#### Filtros de B√∫squeda:")
            col_filtro1, col_filtro2 = st.columns(2)
            with col_filtro1:
                provincias_disponibles_b2 = ["TODAS LAS PROVINCIAS"] + sorted(df_ins['provincia'].unique().tolist())
                provincia_sel_b2 = st.selectbox(
                   "Provincia:", options=provincias_disponibles_b2, key="sel_prov_b2_guia_cuerpo_final")
            with col_filtro2:
                municipios_disponibles_filtrados_b2 = ["TODOS LOS MUNICIPIOS"]
                if provincia_sel_b2 != "TODAS LAS PROVINCIAS":
                    municipios_de_provincia = sorted(df_ins[df_ins['provincia'] == provincia_sel_b2]['municipio'].unique().tolist())
                    municipios_disponibles_filtrados_b2.extend(municipios_de_provincia)
                municipio_sel_b2 = st.selectbox(
                    "Municipio:", options=municipios_disponibles_filtrados_b2, key="sel_mun_b2_guia_cuerpo_final",
                    disabled=(provincia_sel_b2 == "TODAS LAS PROVINCIAS" and len(municipios_disponibles_filtrados_b2) <=1)
                )
                #Usar un cuadro para escribir parte del nombre a buscar:
            pattern_sel_b2 = st.text_input(
                        "Buscar por nombre o info de instituci√≥n (opcional):",
                        value="",
                        autocomplete="on",
                        key="sel_patron_b2",
                        disabled=  len(municipios_disponibles_filtrados_b2) > 1 
            )
            st.markdown("---")

            with st.spinner(f"Cargando gu√≠a de instituciones... Obreros ocupados..."):
                municipio_a_pasar = None
                if provincia_sel_b2 != "TODAS LAS PROVINCIAS" and municipio_sel_b2 != "TODOS LOS MUNICIPIOS":
                    municipio_a_pasar = municipio_sel_b2
                
                guia_data_b2, msg_b2 = analisis_guia_universidades(
                    df_ins, df_main, 
                    provincia_seleccionada=provincia_sel_b2,
                    municipio_seleccionado=municipio_a_pasar)
            info_msg(msg_b2)

            if guia_data_b2:
                st.markdown(f"**Mostrando {len(guia_data_b2)} instituci√≥n(es) seg√∫n los filtros aplicados:**")
                for nombre_uni, data_uni in guia_data_b2.items():

                    titulo_expander = f"üèõÔ∏è {nombre_uni} ({data_uni['sigla']})" # ... (t√≠tulo como antes) ...
                    if pattern_sel_b2 and pattern_sel_b2.lower() not in titulo_expander.lower():
                        continue
                    detalles_loc_exp = []
                    if data_uni.get('municipio') and data_uni['municipio'] != 'N/D': detalles_loc_exp.append(data_uni['municipio'])
                    if data_uni.get('provincia') and data_uni['provincia'] != 'N/D': detalles_loc_exp.append(data_uni['provincia'])
                    if detalles_loc_exp: titulo_expander += f" | {', '.join(detalles_loc_exp)}"
                    if data_uni.get('ano_creacion') and pd.notna(data_uni['ano_creacion']): 
                        titulo_expander += f" (Fundada en {int(data_uni['ano_creacion'])})"
                    
                    with st.expander(titulo_expander):
                        # --- Columnas para informaci√≥n b√°sica y gr√°fico de pastel de g√©nero ---
                        col_info_basica, col_genero_pastel_uni = st.columns([2,1]) # Dar m√°s espacio a la info b√°sica

                        with col_info_basica:
                            st.markdown(f"**Organismo:** `{data_uni.get('organismo', 'N/D')}`")
                            st.markdown(f"**Direcci√≥n:** *{data_uni.get('direccion', 'N/D')}*")
                            st.markdown(f"**Modalidad Principal:** `{data_uni.get('modalidad_estudio', 'N/D')}`")
                        
                        with col_genero_pastel_uni:
                            datos_genero = data_uni.get("datos_genero_uni")
                            if datos_genero and datos_genero.get('Total', 0) > 0:
                                df_pie_genero_uni = pd.DataFrame({
                                    'G√©nero': ['Mujeres', 'Hombres'],
                                    'Cantidad': [datos_genero['Mujeres'], datos_genero['Hombres']]
                                })
                                fig_pie_genero_uni = px.pie(df_pie_genero_uni, values='Cantidad', names='G√©nero', 
                                                        title=f"G√©nero Total ({df_main['Ano_Inicio_Curso'].max()}-{df_main['Ano_Inicio_Curso'].max()+1})",
                                                        color_discrete_map={'Mujeres':'orchid', 'Hombres':'royalblue'},
                                                        height=250) # Gr√°fico compacto
                                fig_pie_genero_uni.update_layout(margin=dict(t=30, b=0, l=0, r=0), showlegend=False)
                                fig_pie_genero_uni.update_traces(textposition='inside', textinfo='percent+label')
                                st.plotly_chart(fig_pie_genero_uni, use_container_width=True)
                            else:
                                st.caption("Sin datos de g√©nero disponibles para el √∫ltimo a√±o.")
                        
                        st.markdown("---")
                        if data_uni["ramas_ofertadas"]:
                            st.markdown("**Oferta Acad√©mica (Ramas y Carreras con matr√≠cula en √∫ltimo a√±o):**")
                            for rama_info in data_uni["ramas_ofertadas"]:
                                with st.container(): # Contenedor para cada rama
                                    st.markdown(f"##### <span style='color: #1E90FF;'>‚ñ∫</span> {rama_info['nombre_rama']}", unsafe_allow_html=True)
                                    if rama_info["carreras"]:
                                        df_carreras_rama = pd.DataFrame(rama_info["carreras"])
                                        df_carreras_rama.rename(columns={
                                            'nombre_carrera': 'Carrera',
                                            'matricula_ultimo_ano': 'Matr√≠cula' # M√°s corto
                                        }, inplace=True)
                                        st.dataframe(df_carreras_rama.set_index('Carrera'))
                                    else:
                                        st.caption("  ‚Ü≥ *Esta rama est√° indicada como ofertada, pero no se encontraron carreras con matr√≠cula en el √∫ltimo a√±o.*")
                                    #st.markdown("---")
                        else:
                            st.info("Esta instituci√≥n no tiene ramas de ciencias con oferta activa o carreras con matr√≠cula reportada...")
            # ... (resto del manejo de errores como antes) ...
            elif provincia_sel_b2 and provincia_sel_b2 != "TODAS LAS PROVINCIAS":
                st.info(f"No se encontraron instituciones para la provincia de '{provincia_sel_b2}'" + 
                        (f" y el municipio de '{municipio_sel_b2}'" if municipio_sel_b2 and municipio_sel_b2 != "TODOS LOS MUNICIPIOS" else "") +
                        " que cumplan los criterios.")
            else:
                st.info("No hay instituciones para mostrar con los filtros actuales, o no hay datos de instituciones cargados.")






