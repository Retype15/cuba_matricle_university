from .ai_functions import ask_ai_component
from .plot_functions import *
from .Gamification import *

def show_info(msg):
    if msg: st.caption(f"‚ÑπÔ∏è {msg}")

### Testeando las funciones del motor de juego, si algo falla es culpa tuya por andar tocando xd (es broma, nada va a fallar aqu√≠ : ) )
### Introduccion del miembro
@st.fragment
def introduction(df_main, game_controller: GameController, ts:Translator, **kwargs):
    if 'initial_mode_selected' not in st.session_state:
        st.session_state.initial_mode_selected = False
    #st.table(df_main.head(10))
    st.header(ts.translate('introduction_header', "üéØ Bienvenidos al Coraz√≥n de la Educaci√≥n Superior Cubana"))
    st.markdown(ts.translate('introduction_markdown_1', """
        La universidad no es solo un edificio; es un crisol de sue√±os, un motor de progreso y un reflejo de las aspiraciones de una sociedad. En este espacio, nos embarcaremos en un viaje anal√≠tico, explorando las corrientes que moldean la matr√≠cula universitaria en Cuba.

        Desde las tendencias generales hasta el detalle de cada carrera y universidad, desentra√±aremos las historias ocultas detr√°s de las distintas universidades del pa√≠s. ¬øEl objetivo? Proveer una br√∫jula basada en evidencia para la toma de decisiones estrat√©gicas, fomentando un sistema de educaci√≥n superior m√°s fuerte, equitativo y alineado con el futuro de la naci√≥n.
    """))
    st.markdown("---")

    if not st.session_state.initial_mode_selected:
        st.subheader(ts.translate('intro_choose_your_path_header', "üõ£Ô∏è Elige tu Camino: ¬øC√≥mo Quieres Explorar?"))
        st.markdown(ts.translate('intro_choose_your_path_text', """
            Este viaje a trav√©s de los datos puede tomar dos rutas. Elige la que mejor se adapte a tu estilo.
        """))

        col1, col2 = st.columns(2, gap="large")

        with col1:
            with st.container(border=True):
                st.markdown(f"### {ts.translate('intro_analyst_path_title', 'üë®‚Äçüè´ La Ruta del Analista')}")
                st.markdown(ts.translate('intro_analyst_path_desc', """
                    Ideal si buscas ir directo al grano. Accede a todos los gr√°ficos y an√°lisis de forma
                    directa, sin interrupciones. Perfecto para una exploraci√≥n r√°pida y enfocada.
                """))
                if st.button(ts.translate('intro_analyst_path_button', "Activar Modo An√°lisis"), use_container_width=True):
                    game_controller.switch_off()
                    st.session_state.initial_mode_selected = True

                    st.rerun()

        with col2:
            with st.container(border=True):
                st.markdown(f"### {ts.translate('intro_explorer_path_title', 'üéÆ La Senda del Explorador')}")
                st.markdown(ts.translate('intro_explorer_path_desc', """
                    Convierte el an√°lisis en un desaf√≠o. En cada secci√≥n, te enfrentar√°s a minijuegos para
                    poner a prueba tu intuici√≥n sobre los datos antes de verlos. ¬°Gana puntos y compite!
                """))
                #st.warning("WARNING: Work in progress... Not finished yet.") # TODO: REVISAR Y QUITAR CUANDO SE TERMINE DE PROGRAMAR LOS MINIJUEGOS A CADA ANALISIS...
                if st.button(ts.translate('intro_explorer_path_button', "Activar Modo Juego"), use_container_width=True, type="primary"):
                    game_controller.switch_on()
                    st.session_state.initial_mode_selected = True
                    st.rerun()

    else:
        if game_controller.game_mode:
            st.info(ts.translate('intro_game_mode_active_info', "üïπÔ∏è ¬°**Modo Juego Activado!** Prep√°rate para los desaf√≠os. Puedes ver tu progreso si presionas el bot√≥n 'üèÜ' que aparece en la esquina inferior derecha."), icon="üèÜ")
        else:
            st.info(ts.translate('intro_analysis_mode_active_info', "üìä **Modo An√°lisis Activado.** Est√°s listo para una exploraci√≥n directa de los datos. Puedes cambiar de modo en cualquier momento en la barra lateral."), icon="üìà")

    st.markdown("---")
    st.success(ts.translate('introduction_sucess', "¬°Tu viaje comienza aqu√≠! Selecciona una secci√≥n en el men√∫ lateral o usa el bot√≥n 'Siguiente'."))

### Pulso Nacional
@st.fragment
def A1(df_main, game_controller: GameController, ts:Translator, **kwargs):
    st.header(ts.translate('A1_header', "üåç El Pulso Nacional: ¬øC√≥mo Late la Matr√≠cula Universitaria?"))
    st.markdown(
        ts.translate(
            key='A1_markdown_1',
            default=
            """
            Imagina que podemos tomarle el pulso a todo el sistema universitario cubano a lo largo de una d√©cada.
            ¬øC√≥mo ha sido su ritmo? ¬øHa experimentado momentos de vigoroso crecimiento, per√≠odos de estabilidad,
            o quiz√°s fases donde el latido se ha vuelto m√°s pausado?

            Esta primera secci√≥n nos ofrece una vista panor√°mica de la matr√≠cula total a nivel nacional,
            permiti√©ndonos identificar las grandes tendencias que han marcado el sistema de educaci√≥n superior
            en los √∫ltimos a√±os. Es nuestro punto de partida para entender el contexto general antes de
            sumergirnos en an√°lisis m√°s espec√≠ficos.
            """
        )
    )

    def render_analysis_content():
        with st.spinner(ts.translate('A1_spinner_1', "Construyendo la gr√°fica A1, por favor espere...")):
            df_historico, _, msg_code, _ = analisis_A1(df_main)

        if msg_code != "success_historical_only" or df_historico is None:
            st.warning(ts.translate('generic_warn_figs', "No se pudo generar el gr√°fico del panorama nacional (A1)."))
            return
        
        fig_a1 = graficate_A1(df_historico, ts)
        st.plotly_chart(fig_a1, use_container_width=True, key="fig_a1_pulso_nacional")
        
        st.subheader(ts.translate('A1_fig_1_subheader',"Descifrando el Ritmo de la D√©cada (2015-2025):"))
        st.markdown(ts.translate(
            key='A1_fig_1_markdown_1',
            default="""
            Observando la trayectoria de la matr√≠cula nacional total en el gr√°fico superior, podemos identificar varias fases clave:

            *   **Impulso Inicial (2015-16 a 2016-17):** El viaje comienza en el curso 2015-2016 con una cifra que ronda los **165,000 estudiantes**. El a√±o siguiente muestra un ligero aumento, estableciendo una base s√≥lida para el crecimiento que vendr√°.

            *   **Crecimiento Sostenido hacia la Cima (2017-18 a 2020-21):** A partir del curso 2017-18, y a pesar de la falta de datos para 2018-19, la tendencia ascendente se retoma con fuerza hasta alcanzar su **punto m√°s √°lgido en el curso 2020-2021, superando los 285,000 estudiantes**. Este per√≠odo representa la fase de mayor expansi√≥n de la matr√≠cula en la d√©cada.

            *   **Meseta y Comienzo del Declive (2021-22 a 2022-23):** El curso 2021-2022 muestra una ligera contracci√≥n respecto al pico, marcando el inicio de una nueva fase. La matr√≠cula se mantiene alta pero ya no crece, y para 2022-23, el descenso se hace m√°s evidente.

            *   **Ajuste Reciente (2023-24 a 2024-25):** Los dos √∫ltimos cursos registrados muestran una **continuaci√≥n de la tendencia descendente**, con la matr√≠cula total situ√°ndose en torno a los **205,000 estudiantes** en el per√≠odo m√°s reciente. Esto sugiere un reajuste del sistema tras el pico de expansi√≥n.
            """
        ))
        
        context_ai_text = ts.translate(
            'A1_ai_context',
            "The current analysis is about the evolution of total national enrollment, male and female, in Cuba from 2015 to 2025. The data, presented in the chart, shows a significant peak around 2020-2021 followed by a decline."
        )
        ask_ai_component(
            analysis_context=context_ai_text,
            key="a1_nacional",
            extra_data=[fig_a1],
            translation=ts.translate('ask_ai_component', {})
        )

    if game_controller.game_mode:
        df_historico_juego, _, _, _ = analisis_A1(df_main)
        
        if df_historico_juego is not None and not df_historico_juego.empty:
            pico_data = df_historico_juego.loc[df_historico_juego['matricula_total'].idxmax()]
            pico_matricula = pico_data['matricula_total']
            pico_curso = pico_data['curso_academico']

            game_data_A1_estimator = pd.DataFrame([{
                "name": ts.translate('A1_peak_enrollment_label', "Matr√≠cula Nacional en el A√±o Pico ({curso})").format(curso=pico_curso),
                "value": pico_matricula
            }])

            st.markdown("---")
            st.subheader(ts.translate('A1_game_subheader', "A Prueba: La Magnitud del Pico"))
            st.markdown(ts.translate(
                'A1_game_intro',
                "El sistema universitario cubano alcanz√≥ un n√∫mero m√°ximo de estudiantes en un punto de la √∫ltima d√©cada. Antes de ver el gr√°fico, ¬øqu√© tan buena es tu intuici√≥n? Intenta estimar cu√°l fue esa cifra m√°xima."
            ))

            estimator_game_A1 = EstimatorMinigame(
                game_id="A1_EstimatorPicoNacional",
                game_title=ts.translate('A1_game_title', "El Estimador del Pico Nacional"),
                data=game_data_A1_estimator,
                content_callback=render_analysis_content,
                num_rounds=1,
                min_score_for_victory=75,
                translation={
                    'estimator_question': ts.translate(
                        'A1_estimator_question', 
                        "¬øCu√°ntos estudiantes crees que hab√≠a en todo el pa√≠s durante el curso de m√°xima matr√≠cula ({curso})?"
                    ).format(curso=pico_curso)
                }
            )
            estimator_game_A1.render()
        else:
            render_analysis_content()
    else:
        render_analysis_content()

### Mosaico de Saberes
@st.fragment
def A2(df_main, game_controller: GameController, ts:Translator, **kwargs):
    st.header(ts.translate('A2_header',"üìö Un Mosaico de Saberes: ¬øHacia D√≥nde se Inclinan los Futuros Profesionales?"))
    st.markdown(ts.translate('A2_markdown_1',"""
    La universidad es un vasto jard√≠n donde florecen diversas disciplinas. Cada rama del conocimiento,
    desde las Ciencias M√©dicas o Matem√°ticas hasta las Artes, representa un camino √∫nico de formaci√≥n y contribuci√≥n
    a la sociedad. En esta secci√≥n, desglosamos la matr√≠cula total para ver c√≥mo se distribuyen
    los estudiantes entre estas grandes √°reas, con el objetivo de responder preguntascomo:
    - ¬øHay protagonistas claros?
    - ¬øC√≥mo ha danzado el inter√©s estudiantil a lo largo de la √∫ltima d√©cada?
    """))
    st.markdown("---")

    # --- AN√ÅLISIS 1: POPULARIDAD DE LAS RAMAS ---

    def render_analysis_content_A2_part1():
        st.subheader(ts.translate('A2_fig_a2_abs_subheader',"La Fuerza de Cada Rama: Evoluci√≥n Hist√≥rica de la Matr√≠cula"))
        with st.spinner(ts.translate('A2_spinner_1',"Analizando la evoluci√≥n de las ramas de ciencias...")):
            df_hist, df_pct, _, _ = analisis_A2(df_main)

        if df_hist is not None:
            fig_a2_abs = graficate_A2_evolucion(df_hist, ts)
            st.plotly_chart(fig_a2_abs, use_container_width=True, key="fig_a2_abs_mosaico")
            st.markdown(ts.translate('A2_fig_a2_abs_markdown_1',"""
            **Cada L√≠nea, una Corriente del Conocimiento:**
            Este gr√°fico traza el viaje de la matr√≠cula absoluta (n√∫mero total de estudiantes) para cada rama de ciencias a lo largo de los a√±os.

            *   **Liderazgo Destacado:** Las **Ciencias M√©dicas** (l√≠nea verde agua) se erigen como la rama con la matr√≠cula m√°s numerosa de forma consistente durante todo el per√≠odo, partiendo de unos 70,000 estudiantes en 2015-16, alcanzando un pico impresionante cercano a los **95,000 estudiantes en 2020-2021**, y aunque experimentan un descenso posterior, se mantienen como la principal fuerza, cerrando en 2024-2025 con m√°s de 70,000 estudiantes.

            *   **Persecuci√≥n y Dinamismo:** Las **Ciencias Pedag√≥gicas** (l√≠nea naranja) muestran una trayectoria muy din√°mica. Comienzan con una matr√≠cula significativa (alrededor de 30,000), experimentan un crecimiento notable hasta superar los **65,000 estudiantes en 2020-2021 y 2021-2022**, convirti√©ndose en la segunda rama m√°s grande durante esos a√±os. Sin embargo, sufren un declive pronunciado en los √∫ltimos cursos, finalizando cerca de los 40,000 estudiantes.

            *   **Bloque Intermedio Consistente:** Un grupo de ramas mantiene una presencia estable aunque con fluctuaciones:
                *   Las **Ciencias T√©cnicas** (l√≠nea rosa) y las **Ciencias Sociales y Human√≠sticas** (l√≠nea celeste) muestran trayectorias paralelas, creciendo desde aproximadamente 20,000 estudiantes hasta un pico alrededor de los **30,000-32,000** entre 2020-21 y 2021-22, para luego descender y situarse en torno a los 23,000-25,000 estudiantes al final del per√≠odo.
                *   Las **Ciencias Econ√≥micas** (l√≠nea roja) presentan un crecimiento m√°s moderado pero constante hasta 2021-22 (alcanzando unos 24,000 estudiantes), seguido de un descenso similar a otras ramas, terminando cerca de los 15,000.
                *   Las **Ciencias Agropecuarias** (l√≠nea azul oscuro) y las **Ciencias de la Cultura F√≠sica y el Deporte** (l√≠nea verde oscuro/marr√≥n) se mantienen en un rango m√°s bajo, generalmente entre 5,000 y 15,000 estudiantes, con picos alrededor de 2020-2021 y descensos posteriores.

            *   **Nicho Especializado:** Las **Ciencias Naturales y Matem√°ticas** (l√≠nea morada) y las **Ciencias de las Artes** (l√≠nea violeta) representan las ramas con menor volumen de matr√≠cula, manteni√©ndose consistentemente por debajo de los 5,000 estudiantes a lo largo de toda la d√©cada. Esto sugiere una alta especializaci√≥n o una demanda m√°s acotada.
            """))
            ask_ai_component(
                analysis_context="The current analysis is about the evolution of absolute enrollment (number of students) by branch of science in Cuba. The data is shown in the attached chart.",
                key="a2_mosaico_abs",
                extra_data=[fig_a2_abs],
                translation=ts.translate('ask_ai_component',{})
            )
        else:
            st.warning(ts.translate('generic_warn_figs',"No se pudo generar el gr√°fico de evoluci√≥n absoluta por rama."))

        if df_pct is not None:
            st.subheader(ts.translate('A2_fig_a2_pct_subheader',"El Reparto del Pastel Acad√©mico: Distribuci√≥n Porcentual Hist√≥rica"))
            fig_a2_pct = graficate_A2_distribucion(df_pct, ts)
            st.plotly_chart(fig_a2_pct, use_container_width=True, key="fig_a2_pct_mosaico")
            st.markdown(ts.translate('A2_fig_a2_pct_markdown_1',"""
            **Proporciones en el Lienzo Universitario:**
            Este gr√°fico de √°rea apilada nos muestra qu√© "porci√≥n del pastel" ha representado cada rama de ciencias dentro del total de la matr√≠cula universitaria en cada curso acad√©mico.

            *   **Dominio Persistente de las Ciencias M√©dicas:** La ancha banda verde agua en la parte superior confirma que las Ciencias M√©dicas han representado consistentemente la mayor proporci√≥n de estudiantes, ocupando cerca del **40-50% del total** en su punto m√°s alto (alrededor de 2016-17 y nuevamente hacia 2024-2025, tras una ligera reducci√≥n porcentual a mediados del per√≠odo).

            *   **Ascenso y Descenso de las Ciencias Pedag√≥gicas:** La banda naranja de las Ciencias Pedag√≥gicas muestra un interesante cambio en su peso relativo. Comienza siendo una porci√≥n importante, se expande significativamente hasta representar la segunda mayor proporci√≥n (llegando a casi un **25-30%** del total alrededor de 2019-2021), pero luego reduce su participaci√≥n porcentual en los √∫ltimos a√±os.

            *   **Estabilidad Relativa en el Medio:** Las Ciencias T√©cnicas (banda marr√≥n/ocre), Sociales y Human√≠sticas (banda celeste) y Econ√≥micas (banda azul oscuro) mantienen proporciones m√°s estables a lo largo del tiempo, aunque con ligeras variaciones. Juntas, suelen conformar una porci√≥n significativa del estudiantado. Por ejemplo, las Ciencias Sociales y Human√≠sticas parecen ocupar consistentemente alrededor del 10-15%.

            *   **Menor Peso Porcentual:** Las dem√°s ramas (Agropecuarias, Cultura F√≠sica, Naturales y Matem√°ticas, Artes) representan individualmente porcentajes menores del total de la matr√≠cula, lo que es coherente con su menor volumen absoluto de estudiantes.

            Este an√°lisis porcentual es crucial porque nos permite entender no solo cu√°ntos estudiantes hay en cada rama, sino tambi√©n c√≥mo se distribuye el inter√©s o la capacidad de admisi√≥n en relaci√≥n con el conjunto del sistema universitario.
            """))
            ask_ai_component(
                analysis_context="The current analysis is about the percentage distribution of enrollment by branch of science in Cuba. The data is shown in the attached stacked area chart.",
                key="a2_mosaico_pct",
                extra_data=[fig_a2_pct],
                translation=ts.translate('ask_ai_component',{})
            )
        else:
            st.warning(ts.translate('generic_warn_figs',"No se pudo generar el gr√°fico de distribuci√≥n porcentual por rama."))

    if game_controller.game_mode:
        st.subheader(ts.translate('A2_subhead_popularity', "Ranking de Popularidad: ¬øQu√© √°reas del saber lideran?"))
        st.markdown(ts.translate('A2_intro_game1', """
        Antes de sumergirnos en los gr√°ficos, pongamos a prueba tu percepci√≥n. A lo largo de Cuba, miles de estudiantes eligen su camino profesional cada a√±o. ¬øCu√°les crees que son las ramas del conocimiento que atraen a la mayor cantidad de universitarios? ¬øPodr√≠as ordenar las principales √°reas seg√∫n su popularidad?
        """))
        
        ano_reciente = df_main['ano_inicio_curso'].max()
        df_ramas_reciente = df_main[df_main['ano_inicio_curso'] == ano_reciente]\
            .groupby('rama_ciencias')['matricula_total'].sum().reset_index()

        if not df_ramas_reciente.empty:
            game_data_A2_classifier = df_ramas_reciente.rename(columns={'rama_ciencias': 'name', 'matricula_total': 'value'})
            
            classifier_game_A2 = ClassifierMinigame(
                game_id="A2_ClassifierSaber",
                game_title=ts.translate('A2_game_title', "El Clasificador del Saber"),
                data=game_data_A2_classifier,
                content_callback=render_analysis_content_A2_part1,
                difficulty=4,
                min_score_for_victory=30
            )
            classifier_game_A2.render()
        else:
            render_analysis_content_A2_part1()
    else:
        render_analysis_content_A2_part1()

    st.markdown("---")

    # --- ANAISIS 2: CORRELACI√ìN ENTRE RAMAS ---
    
    def render_analysis_content_A2_part2():
        st.subheader(ts.translate('A2_subheader_2',"üîó Interconexiones en el Crecimiento: ¬øC√≥mo se Relacionan las Ramas?"))
        st.markdown(ts.translate('A2_markdown_2',"""
            No todas las ramas de ciencias crecen o decrecen de forma aislada. Algunas pueden mostrar
            tendencias de matr√≠cula similares a lo largo del tiempo, mientras que otras pueden tener
            din√°micas m√°s independientes. El siguiente mapa de calor (heatmap) visualiza la
            **correlaci√≥n del cambio porcentual anual de la matr√≠cula** entre las diferentes ramas de ciencias.
            
            *   Un **valor cercano a 1 (azul oscuro/morado intenso)** indica una fuerte correlaci√≥n positiva: cuando una rama crece, la otra tiende a crecer tambi√©n en ese mismo per√≠odo.
            *   Un **valor cercano a -1 (no visible en este ejemplo, ser√≠a el otro extremo del color)** indicar√≠a una fuerte correlaci√≥n negativa: cuando una crece, la otra tiende a decrecer.
            *   Un **valor cercano a 0 (colores m√°s claros/neutros)** sugiere poca o ninguna relaci√≥n lineal en sus patrones de crecimiento anual.
        """))
        
        fig_corr_ramas, df_corr_ramas, msg_code = graficate_A2_correlacion(df_main, ts)

        if msg_code == "success" and fig_corr_ramas is not None:
            st.plotly_chart(fig_corr_ramas, use_container_width=True, key="fig_a2_corr_heatmap")
            with st.expander(ts.translate('A2_fig_corr_expander',"üîç An√°lisis Detallado de las Correlaciones Observadas"), expanded=True):
                st.markdown(ts.translate('A2_fig_corr_markdown_1',"""
                **Observaciones Clave del Mapa de Correlaci√≥n:**

                *   **Sincronizaci√≥n Fuerte:** Se observa una **alta correlaci√≥n positiva (valores > 0.9)** en las tendencias de crecimiento anual entre:
                    *   **Ciencias Agropecuarias y Ciencias Econ√≥micas** (aprox. 0.98)
                    *   **Ciencias Agropecuarias y Ciencias Pedag√≥gicas** (aprox. 0.98)
                    *   **Ciencias Agropecuarias y Ciencias de la Cultura F√≠sica y el Deporte** (aprox. 0.96)
                    *   As√≠ como entre **Ciencias Econ√≥micas, Pedag√≥gicas y de la Cultura F√≠sica**, todas mostrando coeficientes muy elevados entre s√≠.
                    Esto sugiere que estas ramas a menudo experimentan impulsos de crecimiento (o contracci√≥n) de manera muy similar y simult√°nea, posiblemente debido a factores macroecon√≥micos, pol√≠ticas educativas integrales o ciclos de demanda estudiantil que las afectan conjuntamente.

                *   **Correlaciones Positivas Moderadas:**
                    *   Las **Ciencias M√©dicas** muestran una correlaci√≥n positiva moderada (generalmente entre 0.5 y 0.7) con varias otras ramas como Econ√≥micas, Sociales y Human√≠sticas, y T√©cnicas. Esto podr√≠a indicar que el sector m√©dico, si bien tiene sus propias din√°micas, tambi√©n se beneficia o participa de tendencias expansivas m√°s amplias en la educaci√≥n superior.
                    *   Las **Ciencias T√©cnicas** tambi√©n se correlacionan moderadamente con la mayor√≠a de las otras ramas, sugiriendo una conexi√≥n con el ciclo general del sistema.

                *   **Independencia Relativa Notoria:**
                    *   Las **Ciencias Naturales y Matem√°ticas** destacan por tener las **correlaciones m√°s bajas** con casi todas las dem√°s ramas (coeficientes frecuentemente entre 0.2 y 0.4). Esto indica que su patr√≥n de crecimiento de matr√≠cula parece ser bastante independiente de las fluctuaciones que afectan a otras grandes √°reas del conocimiento. Esta rama podr√≠a estar influenciada por factores muy espec√≠ficos, como programas de fomento cient√≠fico particulares o una demanda m√°s especializada y menos sensible a tendencias generales.
                    *   Las **Ciencias de las Artes** tambi√©n muestran correlaciones m√°s d√©biles con algunas de las ramas m√°s grandes como Pedag√≥gicas, aunque tiene una correlaci√≥n moderada interesante con Ciencias M√©dicas.

                *   **Implicaciones Estrat√©gicas:**
                    *   La fuerte sincronizaci√≥n entre ciertas ramas sugiere que las estrategias de planificaci√≥n y asignaci√≥n de recursos podr√≠an considerar estos "clusters" de comportamiento.
                    *   La independencia de Ciencias Naturales y Matem√°ticas podr√≠a requerir un enfoque y monitoreo diferenciado para asegurar su vitalidad y alineaci√≥n con las necesidades de desarrollo cient√≠fico-t√©cnico del pa√≠s.
                    *   La ausencia de correlaciones fuertemente negativas (en este gr√°fico) sugiere que, a nivel agregado de cambio anual, no hay una "canibalizaci√≥n" evidente donde el crecimiento de una rama sea directamente a costa de otra, aunque no se descartan din√°micas competitivas a niveles m√°s espec√≠ficos.
                """))
            ask_ai_component(
                analysis_context="The current analysis is about the correlation matrix of annual enrollment growth among the different branches of science. The data is provided in the attached correlation table.",
                key="a2_corr_ramas",
                extra_data=[df_corr_ramas],
                translation=ts.translate('ask_ai_component',{})
            )
        else:
            st.warning(ts.translate('A2_corr_warn_1',"No se pudo generar el mapa de correlaci√≥n entre ramas."))

    if game_controller.game_mode:
        st.subheader(ts.translate('A2_subhead_correlation', "Sinergias Ocultas: ¬øQu√© ramas crecen juntas?"))
        st.markdown(ts.translate('A2_intro_game2', """
        Las ramas del saber no son islas. Sus tendencias de crecimiento a menudo est√°n conectadas. Algunas se mueven en perfecta sincron√≠a, mientras que otras bailan a su propio ritmo. Cuando el inter√©s en las Ciencias Pedag√≥gicas crece, ¬øqu√© otra √°rea crees que se beneficia de un impulso similar? ¬°Acepta el duelo y desc√∫brelo!
        """))

        _, df_corr_juego, _ = graficate_A2_correlacion(df_main, ts)
        
        if df_corr_juego is not None and not df_corr_juego.empty:
            df_corr_juego.index.name = "Rama_A"
            df_corr_juego.columns.name = "Rama_B"
            df_corr_long = df_corr_juego.stack().reset_index()
            df_corr_long.columns = ['Rama_A', 'Rama_B', 'Correlacion']
            df_corr_long = df_corr_long[df_corr_long['Rama_A'] != df_corr_long['Rama_B']]

            rama_pivote = "Ciencias Pedag√≥gicas"
            if rama_pivote in df_corr_long['Rama_A'].values:
                df_juego_duelo = df_corr_long[df_corr_long['Rama_A'] == rama_pivote].copy()
                
                game_data_A2_duel = pd.DataFrame({
                    "name": df_juego_duelo['Rama_B'],
                    "value": df_juego_duelo['Correlacion']
                })

                if len(game_data_A2_duel) >= 2:
                    duel_game_A2 = DataDuelMinigame(
                        game_id="A2_DuelCorrelacion",
                        game_title=ts.translate('A2_game_title_corr', "Duelo de Sinergias"),
                        data=game_data_A2_duel,
                        content_callback=render_analysis_content_A2_part2,
                        num_rounds=3,
                        min_score_for_victory=20,
                        translation={
                            'duel_question': ts.translate(
                                'A2_duel_question_corr', 
                                "Crecimiento de las **Ciencias Pedag√≥gicas** es M√ÅS similar al de:"
                            )
                        }
                    )
                    duel_game_A2.render()
                else:
                    render_analysis_content_A2_part2()
            else:
                render_analysis_content_A2_part2()
        else:
            render_analysis_content_A2_part2()
    else:
        render_analysis_content_A2_part2()

### Carreras Bajo la Lupa
@st.fragment
def A3(df_main, game_controller: GameController, ts:Translator, **kwargs):
    st.header(ts.translate('A3_header',"üîç Carreras Bajo la Lupa: Popularidad, Tendencias y Dinamismo"))
    st.markdown(ts.translate('A3_markdown_1',"""
    Tras explorar las grandes ramas del saber, es momento de enfocar nuestra lente en las unidades
    fundamentales: las carreras universitarias. ¬øCu√°les son las que capturan el mayor inter√©s estudiantil?
    ¬øC√≥mo ha sido su evoluci√≥n individual? Y, muy importante, ¬øcu√°les muestran un crecimiento
    acelerado y cu√°les parecen estar perdiendo impulso?
    """))
    st.markdown("---")

    top_n = 10

    def render_analysis_content_part1():
        st.subheader(ts.translate('A3_subheader_2',"üèÜ El Podio de las Carreras: ¬øCu√°les Lideran la Matr√≠cula Actual?"))
        
        with st.spinner(ts.translate('A3_spinner_1',"Analizando el ranking y evoluci√≥n de las carreras top...")):
            df_ranking, df_evolucion, curso_reciente, status = analisis_A3(df_main, top_n=top_n)

        if status != "success" or df_ranking is None:
            st.warning(ts.translate('A3_warning_analysis_failed', "No se pudo realizar el an√°lisis de popularidad de carreras. Estado: {status}").format(status=status))
            return

        st.markdown(ts.translate('A3_markdown_2',"""
        A la izquierda observamos el ranking de todas las carreras seg√∫n su matr√≠cula total en el curso m√°s reciente
        ({year_range}). A la derecha, vemos la evoluci√≥n hist√≥rica de la matr√≠cula
        para las {top_n} carreras que actualmente se encuentran en la cima de este ranking.
        """).format(year_range=curso_reciente, top_n=top_n))

        col_ranking, col_evolucion_top = st.columns([1, 2], gap="large")

        with col_ranking:
            st.dataframe(
                df_ranking, 
                use_container_width=True,
                hide_index=True,
                height=500
            )

        with col_evolucion_top:
            if df_evolucion is not None and not df_evolucion.empty:
                fig_evolucion = graficate_A3_evolucion(df_evolucion, ts, top_n)
                st.plotly_chart(fig_evolucion, use_container_width=True, key="fig_a3_lupa_evolution")
            else:
                st.info(ts.translate('A3_col_evo_top_info',"No se gener√≥ gr√°fico de evoluci√≥n para las carreras top actuales."))

        st.markdown(ts.translate('A3_markdown_3',"""
        **Puntos Clave del Podio:**
        *   **Liderazgo Indiscutible:** **Medicina** se posiciona firmemente como la carrera con la mayor matr√≠cula (35,889 estudiantes), una constante que ya hab√≠amos vislumbrado al analizar las ramas del saber.
        *   **Fuerzas Significativas:** Le siguen **Cultura F√≠sica** (14,695) y **Educaci√≥n Primaria** (12,867), demostrando una demanda considerable en estas √°reas.
        *   **Top 5 Robusto:** **Enfermer√≠a** (9,999) y **Contabilidad y Finanzas** (9,883) completan el top 5, ambas con una matr√≠cula muy cercana a los 10,000 estudiantes.
        *   **Evoluci√≥n de las L√≠deres:** El gr√°fico de la derecha nos permite ver c√≥mo estas carreras (y otras del top 10) han llegado a su posici√≥n actual. Observa c√≥mo algunas han tenido un crecimiento m√°s sostenido, mientras otras muestran picos y valles m√°s pronunciados.
        """))

        ask_ai_component(
            analysis_context="Analysis of the degree program rankings and the evolution of the top.",
            key="a3_carreras_top",
            extra_data=[df_ranking, df_evolucion],
            translation=ts.translate('ask_ai_component',{})
        )

    if game_controller.game_mode:
        st.subheader(ts.translate('A3_game1_subheader', "A Prueba: El Ranking de Popularidad"))
        st.markdown(ts.translate('A3_game1_intro', """
        Antes de ver el ranking completo, ¬øqu√© tan buena es tu intuici√≥n sobre la demanda estudiantil? Te presentamos una selecci√≥n de carreras. ¬°Ord√©nalas de la m√°s popular a la menos popular seg√∫n la matr√≠cula del √∫ltimo a√±o!
        """))
        
        df_ranking_game, _, _, _ = analisis_A3(df_main, top_n=top_n)
        if df_ranking_game is not None and not df_ranking_game.empty:
            game_data_classifier = df_ranking_game.rename(columns={'carrera': 'name', 'matricula_total': 'value'})
            
            classifier_game_A3 = ClassifierMinigame(
                game_id="A3_ClassifierPopularidad",
                game_title=ts.translate('A3_game1_title', "El Clasificador de Carreras"),
                data=game_data_classifier,
                content_callback=render_analysis_content_part1,
                difficulty=4,
                min_score_for_victory=30
            )
            classifier_game_A3.render()
        else:
            render_analysis_content_part1()
    else:
        render_analysis_content_part1()

    st.markdown("---")

    def render_analysis_content_part2():
        st.subheader(ts.translate('A3_subheader_4', "üöÄ El Ritmo del Cambio: ¬øQu√© Carreras Despegan o Aterrizan?"))
        st.markdown(ts.translate('A3_markdown_4', """
        La **Tasa de Crecimiento Anual Compuesto (CAGR)** nos ofrece una perspectiva del dinamismo.
        Calcula el crecimiento (o decrecimiento) porcentual promedio de la matr√≠cula de una carrera cada a√±o,
        considerando todo el per√≠odo analizado. Un CAGR alto sugiere una expansi√≥n r√°pida.
        """))
        
        with st.spinner(ts.translate('A3_spinner_4',"Calculando el dinamismo de las carreras (CAGR)...")):
            df_cagr, periodo_str, status_cagr = analisis_A3_cagr(df_main)

        if status_cagr != "success" or df_cagr is None:
            st.warning(ts.translate('A3_warning_cagr_failed', "No se pudo realizar el an√°lisis de crecimiento (CAGR). Estado: {status}").format(status=status_cagr))
            return
            
        fig_top_cagr, fig_bottom_cagr = graficate_A3_cagr(df_cagr, periodo_str, ts) #type:ignore

        col_cagr_top, col_cagr_bottom = st.columns(2, gap="large")

        with col_cagr_top:
            st.markdown(f"**{ts.translate('A3_cagr_top_title', 'üìà Top 15 con Mayor Crecimiento')}**")
            st.plotly_chart(fig_top_cagr, use_container_width=True, key="fig_a6_top_lupa_cagr")
            st.markdown(ts.translate('A3_col_cagr_top_markdown_2', """
            Estas carreras han experimentado la expansi√≥n m√°s notable en su matr√≠cula promedio anual.
            *   **Sorprendente Despegue:** **Servicios Estomatol√≥gicos** lidera con un CAGR superior al 100%, lo que indica una duplicaci√≥n (o m√°s) de su matr√≠cula promedio a√±o tras a√±o.
            *   **Ingenier√≠as en Auge:** Varias ingenier√≠as como **Art√≠stica**, **Procesos Agroindustriales** e **Inform√°tica** muestran un crecimiento muy saludable.
            *   **Educaci√≥n con Impulso:** Ramas de la educaci√≥n como **Preescolar**, **Agropecuaria** y **Primaria** tambi√©n figuran con un CAGR positivo y significativo.
            """))

        with col_cagr_bottom:
            st.markdown(f"**{ts.translate('A3_cagr_bottom_title', 'üìâ Top 15 con Mayor Decrecimiento')}**")
            st.plotly_chart(fig_bottom_cagr, use_container_width=True, key="fig_a6_bottom_lupa_cagr")
            st.markdown(ts.translate('A3_col_cagr_bottom_markdown_2', """
            En el otro extremo, estas carreras han visto su matr√≠cula promedio anual disminuir o crecer a un ritmo mucho menor.
            *   **Ajustes Notables:** **Estudios Socioculturales** y **Estomatolog√≠a** (no confundir con Servicios Estomatol√≥gicos) presentan los mayores decrecimientos promedio.
            *   **Desaf√≠os Diversos:** Carreras como **Ingenier√≠a Agr√≠cola**, **Artes Visuales**, **Matem√°tica**, **M√∫sica** y varias **Ingenier√≠as** (Hidr√°ulica, Civil, Telecomunicaciones, Industrial) tambi√©n aparecen en esta lista, sugiriendo una revisi√≥n de sus tendencias.
            """))

        st.markdown(ts.translate('A3_markdown_5', """
        **Reflexiones Estrat√©gicas a partir de estos Ritmos:**
        *   Un **alto CAGR** no siempre significa una matr√≠cula total masiva (podr√≠a ser una carrera peque√±a creciendo r√°pido), pero s√≠ indica una **tendencia positiva fuerte** que merece atenci√≥n, ya sea para fomentar o para asegurar recursos.
        *   Un **CAGR bajo o negativo** en carreras importantes podr√≠a ser una se√±al para investigar las causas: ¬øcambios en el mercado laboral, preferencias estudiantiles, oferta acad√©mica?
        *   Es crucial cruzar esta informaci√≥n de CAGR con la matr√≠cula absoluta (del ranking) para obtener una imagen completa.
        """))

        ask_ai_component(
            analysis_context="Analysis of the Compound Annual Growth Rate (CAGR) of degree programs.",
            key="a3_carreras_cagr",
            extra_data=[df_cagr],
            translation=ts.translate('ask_ai_component',{})
        )

    if game_controller.game_mode:
        st.subheader(ts.translate('A3_game2_subheader', "Duelo del Crecimiento"))
        st.markdown(ts.translate('A3_game2_intro', """
        Algunas carreras crecen a un ritmo vertiginoso mientras otras se contraen. ¬øPodr√°s identificar cu√°l de las dos opciones ha tenido una mayor tasa de crecimiento promedio anual? ¬°Acepta el duelo!
        """))
        
        df_cagr_game, _, _ = analisis_A3_cagr(df_main)
        if df_cagr_game is not None and not df_cagr_game.empty:
            game_data_duel = df_cagr_game.rename(columns={'carrera': 'name', 'CAGR': 'value'})

            duel_game_A3 = DataDuelMinigame(
                game_id="A3_DuelCrecimiento",
                game_title=ts.translate('A3_game2_title', "Duelo de Crecimiento"),
                data=game_data_duel,
                content_callback=render_analysis_content_part2,
                num_rounds=3,
                min_score_for_victory=20,
                translation={
                    'duel_question': ts.translate('A3_duel_question', "Esta carrera tuvo un **MAYOR** crecimiento promedio que la otra.")
                }
            )
            duel_game_A3.render()
        else:
            render_analysis_content_part2()
    else:
        render_analysis_content_part2()

### Perspectiva de G√©nero
@st.fragment
def A4(df_main, game_controller: GameController, ts:Translator, **kwargs):
    st.header(ts.translate('A4_header', "‚ôÄÔ∏è‚ôÇÔ∏è Equilibrando la Balanza: Una Mirada a la Perspectiva de G√©nero"))
    st.markdown(ts.translate('A4_markdown_1', """
    La universidad no solo forma profesionales, sino que tambi√©n moldea una sociedad m√°s justa y equitativa.
    En esta secci√≥n, nos adentramos en la composici√≥n de g√©nero de la matr√≠cula universitaria.
    ¬øExiste un equilibrio entre hombres y mujeres en las aulas? ¬øHay √°reas del conocimiento
    tradicionalmente asociadas a un g√©nero que mantienen esos patrones, o estamos presenciando
    una transformaci√≥n hacia una mayor paridad? Acomp√°√±anos a descubrirlo.
    """))
    st.markdown("---")

    with st.spinner(ts.translate('A4_spinner_1', "Analizando la perspectiva de g√©nero...")):
        df_ramas, df_fem, df_masc, curso_reciente, status = analisis_A4(df_main)

    if status != "success":
        st.warning(ts.translate('A4_warning_analysis_failed', "No se pudo realizar el an√°lisis de g√©nero. Estado: {status}").format(status=status))
        return

    def render_part1():
        if df_ramas is not None and not df_ramas.empty:
            st.subheader(ts.translate('A4_fig_ramas_subheader', "Participaci√≥n Femenina por Rama de Ciencias ({curso})").format(curso=curso_reciente))
            fig = graficate_A4_ramas(df_ramas, ts, curso_reciente) #type:ignore
            st.plotly_chart(fig, use_container_width=True, key="fig_a4_ramas_genero")
            st.markdown(ts.translate('A4_fig_ramas_markdown_1', """
            **El Panorama General por √Åreas del Saber:**
            Este gr√°fico de barras nos muestra el porcentaje de mujeres matriculadas en cada gran rama de ciencias. La l√≠nea roja punteada en el 50% representa la paridad perfecta.

            *   **Liderazgo Femenino Pronunciado:** Las **Ciencias Pedag√≥gicas** destacan con m√°s del **80%** de matr√≠cula femenina, seguidas de cerca por las **Ciencias Sociales y Human√≠sticas** y las **Ciencias M√©dicas**, ambas superando el **70%**. Esto indica una fuerte presencia y preferencia femenina en estas importantes √°reas.
            *   **Mayor√≠a Femenina Sostenida:** Las **Ciencias Econ√≥micas**, **Ciencias de las Artes** y **Ciencias Naturales y Matem√°ticas** tambi√©n muestran una mayor√≠a de mujeres, con porcentajes que oscilan entre el **55% y el 65%**, situ√°ndose por encima de la l√≠nea de paridad.
            *   **Cerca de la Paridad o Ligera Mayor√≠a Masculina:** Las **Ciencias Agropecuarias** se encuentran m√°s cerca del equilibrio, aunque a√∫n con una ligera mayor√≠a femenina (casi el 50%).
            *   **Desaf√≠os en √Åreas T√©cnicas y Deportivas:** En contraste, las **Ciencias T√©cnicas** (aproximadamente 35% mujeres) y, de manera m√°s marcada, las **Ciencias de la Cultura F√≠sica y el Deporte** (alrededor del 32% mujeres) son las ramas con la menor representaci√≥n femenina, indicando una persistente brecha de g√©nero en estos campos.
            """))
            
            ask_ai_component(
                analysis_context="Analysis of the percentage of female participation by field of science.",
                key="a4_ramas_genero",
                extra_data=[df_ramas],
                translation=ts.translate('ask_ai_component',{})
            )
        else:
            st.info(ts.translate('A4_info_no_branch_data', "No hay datos de g√©nero por ramas para mostrar."))

    def render_part2():
        st.markdown("---")
        if df_fem is not None and not df_fem.empty and df_masc is not None and not df_masc.empty:
            st.subheader(ts.translate('A4_fig_carreras_subheader', "Zoom a las Carreras: Extremos del Espectro de G√©nero ({curso}, Matr√≠cula >= 30)").format(curso=curso_reciente))
            fig = graficate_A4_carreras(df_fem, df_masc, ts, curso_reciente) #type:ignore
            st.plotly_chart(fig, use_container_width=True, key="fig_a4_carreras_genero")
            st.markdown(ts.translate('A4_fig_carreras_markdown_1', """
            **Casos Destacados de Mayor√≠a y Minor√≠a Femenina:**
            Estos gr√°ficos nos llevan al detalle de las carreras, mostrando las 10 con mayor porcentaje de mujeres y las 10 con menor porcentaje (es decir, mayor presencia masculina), siempre que tengan una matr√≠cula de al menos 30 estudiantes para asegurar la representatividad.

            *   **Feminizaci√≥n Extrema en Algunas √Åreas:** Carreras como **Educaci√≥n Preescolar** se acercan al 100% de matr√≠cula femenina. Otras, como **T√©cnico Superior en Logofonoaudiolog√≠a**, **Educaci√≥n Logopedia** y **Educaci√≥n Espa√±ol-Literatura**, tambi√©n muestran una abrumadora mayor√≠a de mujeres, superando el 90%. Esto es consistente con la alta feminizaci√≥n de las Ciencias Pedag√≥gicas. **Servicios Estomatol√≥gicos** y **Estudios Socioculturales** tambi√©n destacan en este grupo.

            *   **Dominio Masculino en Ingenier√≠as y √Åreas T√©cnicas:** En el otro extremo, carreras como **Ingenier√≠a Inform√°tica**, **Ingenier√≠a en Autom√°tica**, **Ciencias de la Computaci√≥n**, **Gesti√≥n del Proceso Inversionista** y varias **Ingenier√≠as Mec√°nica, El√©ctrica y en T√©cnicos Superior en Entrenamiento Deportivo** presentan porcentajes de mujeres muy bajos, algunos por debajo del 10% y la mayor√≠a por debajo del 25%. Esto refleja la brecha observada en las Ciencias T√©cnicas y deportivas a nivel de rama.

            *   **Matices Importantes:** Es crucial observar que incluso dentro de las "Top 10 con Menor % de Mujeres", los porcentajes var√≠an. Mientras algunas ingenier√≠as apenas superan el 5-10% de presencia femenina, otras pueden estar m√°s cerca del 20-25%.
            """))

            ask_ai_component(
                analysis_context="Analysis of degree programs with the highest and lowest female participation.",
                key="a4_carreras_genero",
                extra_data=[df_fem, df_masc],
                translation=ts.translate('ask_ai_component',{})
            )
        else:
            st.info(ts.translate('A4_info_no_career_data', "No hay suficientes datos de carreras para mostrar el an√°lisis de extremos de g√©nero."))

        st.markdown(ts.translate('A4_markdown_2', """
        ---
        **Reflexiones para la Acci√≥n:**
        *   La alta feminizaci√≥n en ciertas ramas y carreras es un fen√≥meno consolidado. Si bien refleja vocaciones, tambi√©n es importante asegurar que no existan barreras impl√≠citas o desincentivos para la participaci√≥n masculina en ellas.
        *   El mayor desaf√≠o para la equidad de g√©nero se encuentra claramente en las **Ciencias T√©cnicas** y en varias ingenier√≠as espec√≠ficas, as√≠ como en **Ciencias de la Cultura F√≠sica y el Deporte**. Se requieren estrategias continuas y efectivas para atraer y retener a m√°s mujeres en estos campos cruciales para el desarrollo tecnol√≥gico y social.
        *   Estos datos son una invitaci√≥n a profundizar: ¬øCu√°les son las causas de estos desbalances? ¬øC√≥mo podemos inspirar a las nuevas generaciones a explorar todas las √°reas del conocimiento sin sesgos de g√©nero?
        """))

    if game_controller.game_mode:
        st.subheader(ts.translate('A4_game1_subheader', "Duelo de G√©nero por Rama"))
        st.markdown(ts.translate('A4_game1_intro', "Algunas √°reas del conocimiento atraen a m√°s mujeres que otras. ¬øSabr√≠as decir en cu√°l de las siguientes ramas hay un mayor porcentaje de matr√≠cula femenina?"))
        
        if df_ramas is not None and not df_ramas.empty:
            game_data_duel = df_ramas.rename(columns={'rama_ciencias': 'name', 'Porcentaje_Mujeres': 'value'})
            
            duel_game_A4 = DataDuelMinigame(
                game_id="A4_DuelGeneroRama",
                game_title=ts.translate('A4_game1_title', "Duelo de Ramas"),
                data=game_data_duel,
                content_callback=render_part1,
                num_rounds=3,
                min_score_for_victory=20,
                translation={
                    'duel_question': ts.translate('A4_duel_question', "¬øQu√© rama tiene un porcentaje M√ÅS ALTO de mujeres?")
                }
            )
            duel_game_A4.render()
        else:
            render_part1()

        if 'A4_DuelGeneroRama' in game_controller.registered_games and game_controller.registered_games['A4_DuelGeneroRama'].is_finished():
            st.markdown("---")
            st.subheader(ts.translate('A4_game2_subheader', "Espera! Hay un intruso entre las carreras!"))
            st.markdown(ts.translate('A4_game2_intro', "Tres de las siguientes carreras tienen una abrumadora mayor√≠a de mujeres en sus aulas. Una de ellas, sin embargo, es un campo predominantemente masculino. ¬°Identifica al intruso!"))
            
            if df_fem is not None and not df_fem.empty and df_masc is not None and not df_masc.empty:
                items_fem = df_fem.sample(3)[['carrera']].copy()
                items_fem['category'] = 'Feminized'
                
                item_masc = df_masc.sample(1)[['carrera']].copy()
                item_masc['category'] = 'Masculinized'
                
                game_data_impostor = pd.concat([items_fem, item_masc]).rename(columns={'carrera': 'item'})
                
                impostor_game_A4 = ImpostorMinigame(
                    game_id="A4_ImpostorGeneroCarrera",
                    game_title=ts.translate('A4_game2_title', "El Intruso de G√©nero"),
                    data=game_data_impostor,
                    item_col='item',
                    category_col='category',
                    exclude_if_contains=False,
                    content_callback=render_part2,
                    min_score_for_victory=25
                )
                impostor_game_A4.render()
            else:
                render_part2()
    else:
        render_part1()
        render_part2()

### Universidades: Fortalezas y Focos
@st.fragment
def A5(df_main, df_ins, game_controller: GameController, ts:Translator, **kwargs):
    st.header(ts.translate('A5_header', "üèõÔ∏è Universidades en Perspectiva: Descubriendo Fortalezas y Focos de Especializaci√≥n"))
    st.markdown(ts.translate('A5_markdown_1', """
    Cada universidad es un ecosistema √∫nico con su propia historia, vocaci√≥n y √°reas de excelencia.
    En esta secci√≥n, cambiamos nuestra perspectiva para analizar c√≥mo se distribuye el talento estudiantil
    a nivel institucional. ¬øQu√© universidades concentran la mayor cantidad de estudiantes?
    ¬øExisten centros altamente especializados en ciertas ramas o carreras? ¬øY qu√© carreras
    son joyas raras, ofrecidas solo por unas pocas instituciones?
    """))
    st.markdown("---")
    
    with st.spinner(ts.translate('A5_spinner_1', "Analizando la distribuci√≥n institucional de la matr√≠cula...")):
        df_treemap, df_oferta, curso, status = analisis_A5(df_main)

    if status != "success":
        st.warning(ts.translate('A5_warning_analysis_failed', "No se pudo realizar el an√°lisis institucional. Estado: {status}").format(status=status))
        return

    def render_part1():
        st.subheader(ts.translate('A5_fig_treemap_subheader', "Mapa Interactivo de la Matr√≠cula Universitaria ({curso})").format(curso=curso))
        if df_treemap is not None and not df_treemap.empty:
            fig = graficate_A5_treemap(df_treemap, ts, curso)
            st.plotly_chart(fig, use_container_width=True, key="fig_a5_treemap_unis")
            st.markdown(ts.translate('A5_fig_treemap_markdown_1', """
            **Navegando el Universo Institucional:**
            Este "mapa de √°rbol" (treemap) es una representaci√≥n visual de la matr√≠cula total.
            *   **El Tama√±o Importa:** El √°rea de cada rect√°ngulo es proporcional al n√∫mero de estudiantes. Comienza con "Todas las Universidades"; haz clic en una universidad (ej. `UCLV`, `UH`, `CUJAE`) para ver c√≥mo se desglosa su matr√≠cula por ramas de ciencias. Un nuevo clic en una rama te mostrar√° las carreras dentro de ella y su peso en esa instituci√≥n.
            *   **Identifica los Gigantes:** A simple vista, puedes identificar las universidades con mayor volumen de estudiantes. Por ejemplo, la **UO (Universidad de Oriente)**, **UH (Universidad de La Habana)** y **UCMLH (Universidad de Ciencias M√©dicas de La Habana)**, entre otras, muestran rect√°ngulos considerablemente grandes, indicando una matr√≠cula importante.
            *   **Focos de Especializaci√≥n:** Observa c√≥mo algunas universidades tienen casi toda su "√°rea" concentrada en una o dos ramas (ej. las Universidades de Ciencias M√©dicas predominantemente en "Ciencias M√©dicas"), mientras otras muestran una mayor diversificaci√≥n, como se observa, Ciencias M√©dicas sobresale en todas las universidades que la ofertan.
            """))
        else:
            st.info(ts.translate('A5_info_no_treemap_data', "No hay datos disponibles para generar el mapa interactivo."))
        
        st.markdown("---")
        st.subheader(ts.translate('A5_df_carreras_unicas_subheader', "Joyas Acad√©micas: Carreras por Nivel de Exclusividad"))
        
        if game_controller.game_mode:
            st.markdown("---")
            st.subheader(ts.translate('A5_game2_subheader', "Adivina la Exclusividad"))
            st.markdown(ts.translate('A5_game2_intro', "Algunas carreras se imparten en todo el pa√≠s, mientras que otras son verdaderas rarezas. ¬øQu√© tan exclusiva crees que es la siguiente carrera?"))
            
            if df_oferta is not None and not df_oferta.empty:
                game_data_estimator = df_oferta.rename(columns={'carrera': 'name', 'Num_Universidades_Ofertan': 'value'})
                
                estimator_game_A5 = EstimatorMinigame(
                    game_id="A5_EstimatorExclusividad",
                    game_title=ts.translate('A5_game2_title', "El Estimador de Exclusividad"),
                    data=game_data_estimator,
                    content_callback=render_part1_ext,
                    num_rounds=4,
                    min_score_for_victory=200
                )
                estimator_game_A5.render()
            else:
                render_part1_ext()
        else:
            render_part1_ext()

    def render_part1_ext():
        if df_oferta is not None and not df_oferta.empty:
            st.markdown(ts.translate('A5_df_carreras_unicas_markdown_new', """
            Este gr√°fico agrupa las carreras seg√∫n el n√∫mero de universidades que las imparten en el curso {curso}.
            Cada punto representa una carrera. Pasa el rat√≥n sobre un punto para ver su nombre. Las anotaciones en la parte superior
            indican cu√°ntas carreras existen en cada grupo de exclusividad.
            """).format(curso=curso))
            
            fig = grouped_dot_plot(
                df_oferta,
                x='Num_Universidades_Ofertan',
                y='carrera',
                title=ts.translate('A5_chart_title_grouped_offer', 'Distribuci√≥n de Carreras por Exclusividad de Oferta'),
                yaxis_title=ts.translate('A5_chart_yaxis_num_unis', 'N¬∫ de Universidades que la Ofertan'),
                annotation_text=ts.translate('_carrers', 'carreras'),
                color_scale='Viridis_r'
            )
            st.plotly_chart(fig, use_container_width=True)

            with st.expander(ts.translate('A5_expander_show_all_data', "Ver la tabla completa con todas las carreras")):
                st.dataframe(df_oferta, use_container_width=True, hide_index=True)

            ask_ai_component(
                analysis_context="List of degree programs with limited availability across universities.",
                key="a5_carreras_unicas",
                extra_data=[df_oferta],
                translation=ts.translate('ask_ai_component',{})
            )
        else:
            st.info(ts.translate('A5_info_no_limited_offer_data', "No se encontraron datos sobre carreras con oferta limitada."))

    def render_part2():
        st.markdown("---")
        st.subheader(ts.translate('A5_subheader_2', "Lupa en Carreras Clave: ¬øQui√©n es Qui√©n en la Formaci√≥n Espec√≠fica?"))
        st.markdown(ts.translate('A5_markdown_2', """
        Selecciona hasta 3 carreras de tu inter√©s. El gr√°fico mostrar√° la evoluci√≥n hist√≥rica de la matr√≠cula
        para esas carreras, desglosada por cada universidad que las imparte. Esto nos permite comparar
        el peso y la trayectoria de diferentes instituciones en la formaci√≥n de profesionales en campos espec√≠ficos.
            
        *Si el gr√°fico parece muy denso, intenta seleccionar menos carreras o conc√©ntrate en las tendencias generales de las universidades m√°s grandes para cada carrera.*
        """))

        todas_carreras_sorted = sorted(df_main['carrera'].unique())
        default_carreras = []
        if todas_carreras_sorted:
            top_carreras_df = df_main.groupby('carrera')['matricula_total'].sum().nlargest(2)
            if not top_carreras_df.empty:
                default_carreras = top_carreras_df.index.tolist()
            else:
                default_carreras = todas_carreras_sorted[:min(2, len(todas_carreras_sorted))]

        carreras_seleccionadas = st.multiselect(
            ts.translate('A5_multiselect_carreras', "Carreras para comparar evoluciones por universidad:"),
            options=todas_carreras_sorted,
            default=default_carreras,
            max_selections=3,
            key="select_carreras_a5_uni_comparison"
        )

        if carreras_seleccionadas:
            with st.spinner(ts.translate('A5_spinner_2', "Generando gr√°fico comparativo por universidad...")):
                df_comparativa, status_comp = analisis_A5_comparativa(df_main, carreras_a_comparar=carreras_seleccionadas)

            if status_comp == "success" and df_comparativa is not None:
                fig = graficate_A5_comparativa(df_comparativa, ts)
                st.plotly_chart(fig, use_container_width=True, key="fig_a9_comparativa_unis")
                
                ask_ai_component(
                    analysis_context="Historical trends by university for the selected academic programs.",
                    key="a5_comparativa_unis_" + "_".join(sorted([c.replace(' ','_') for c in carreras_seleccionadas])),
                    extra_data=[df_comparativa],
                    translation=ts.translate('ask_ai_component')
                )
            else:
                st.warning(ts.translate('A5_warning_comparison_failed', "No se pudo generar el gr√°fico comparativo. Causa: {status}").format(status=status_comp))
        else:
            st.info(ts.translate('A5_no_carreras_selected', "Por favor, elige al menos una carrera para ver la comparativa."))
        
        st.markdown(ts.translate('A5_markdown_3', """
        ---
        **Visiones Estrat√©gicas para la Red de Universidades:**
        *   **Potenciar la Excelencia:** Identificar universidades l√≠deres en carreras clave puede guiar la inversi√≥n para convertirlas en centros de referencia nacional o internacional.
        *   **Optimizar Recursos:** El treemap y el an√°lisis de ofertas √∫nicas pueden revelar duplicidades innecesarias o, por el contrario, la necesidad de expandir la oferta de ciertas carreras en m√°s regiones.
        *   **Colaboraci√≥n Interinstitucional:** Conocer las fortalezas de cada una puede fomentar sinergias, programas conjuntos y movilidad estudiantil y profesoral.
        """))

    if game_controller.game_mode:
        st.subheader(ts.translate('A5_game1_subheader', "GeoGuesser Universitario"))
        st.markdown(ts.translate('A5_game1_intro', "Antes de analizar las universidades en detalle, ¬øconoces su ubicaci√≥n? ¬°Demu√©stralo!"))
        
        if df_ins is not None and not df_ins.empty:
            game_data_geo = df_ins[['nombre_institucion', 'provincia']].dropna()
            
            GeoGuesserMinigame(
                game_id="A5_GeoGuesserUbicacion",
                game_title=ts.translate('A5_game1_title', "Adivina la Provincia"),
                data=game_data_geo,
                content_callback=render_part1,
                num_rounds=2,
                min_score_for_victory=40
            ).render()
        else:
            render_part1()

        game1_finished = 'A5_GeoGuesserUbicacion' in game_controller.registered_games and game_controller.registered_games['A5_GeoGuesserUbicacion'].is_finished()
        game2_finished = 'A5_EstimatorExclusividad' in game_controller.registered_games and game_controller.registered_games['A5_EstimatorExclusividad'].is_finished()
        
        if game1_finished and game2_finished:
            render_part2()

    else:
        render_part1()
        render_part2()

### Mirando al Ma√±ana (Proyecciones)
@st.fragment
def A6(df_main, game_controller: GameController, ts:Translator, **kwargs):
    st.header(ts.translate('A6_header_1', "üî≠ Mirando al Ma√±ana: ¬øQu√© Podr√≠amos Esperar? (Proyecciones Futuras)"))
    st.markdown(ts.translate('A6_markdown_1', """
    Anticipar el futuro es un desaf√≠o, pero analizar las tendencias recientes nos permite trazar
    escenarios posibles. En esta secci√≥n, volveremos a examinar nuestros indicadores clave de matr√≠cula,
    pero esta vez extendiendo nuestra mirada dos cursos acad√©micos hacia adelante mediante proyecciones.

    ‚ö†Ô∏è **Una Br√∫jula, no un Or√°culo:** Es fundamental recordar que estas son **proyecciones**, no predicciones
    infalibles. Se basan en modelos de **Regresi√≥n Lineal simple aplicados a los √∫ltimos 6 a√±os de datos hist√≥ricos**
    (o menos, si los datos son insuficientes para una rama o carrera espec√≠fica). M√∫ltiples factores no contemplados
    en estos modelos (cambios de pol√≠ticas, crisis econ√≥micas, nuevas demandas sociales, etc.) podr√≠an
    alterar significativamente estas trayectorias. Utilic√©moslas como una herramienta para la reflexi√≥n
    estrat√©gica y la planificaci√≥n proactiva, no como un destino escrito en piedra.
    """))
    st.markdown("---")

    def render_content():
        st.subheader(ts.translate('A6_subheader_1', "Horizonte Nacional: Proyecci√≥n de la Matr√≠cula Total"))
        with st.spinner(ts.translate('A6_spinner_1', "Calculando la proyecci√≥n de matr√≠cula nacional...")):
            df_hist_nac, df_proy_nac, status_nac, n_anos_reg_nac = analisis_A1(df_main, projection=True)

        if status_nac == "success_with_projection" and df_hist_nac is not None and df_proy_nac is not None and n_anos_reg_nac is not None:
            st.info(ts.translate('A6_info_1', "Las l√≠neas discontinuas y los puntos en forma de diamante m√°s all√° del curso 2024-2025 representan las proyecciones."))
            fig_proy_nacional = graficate_A1(df_hist_nac, ts, df_proy_nac, n_anos_reg_nac)
            st.plotly_chart(fig_proy_nacional, use_container_width=True, key="fig_a6_proy_nacional")
            
            st.markdown(ts.translate('A6_markdown_national_explanation', """
            **Interpretando la Tendencia Nacional Proyectada:**

            El gr√°fico superior combina la evoluci√≥n hist√≥rica de la matr√≠cula (barras y l√≠nea s√≥lida hasta el curso 2024-25) con una proyecci√≥n para los dos cursos siguientes (l√≠nea discontinua con diamantes).

            *   **Punto de Partida:** La proyecci√≥n comienza desde el √∫ltimo dato hist√≥rico registrado, que muestra una matr√≠cula nacional de aproximadamente **205,000 estudiantes**.
            *   **Trayectoria Proyectada:** El modelo de regresi√≥n lineal, basado en la tendencia de los √∫ltimos a√±os, sugiere una **continuaci√≥n de la fase de ajuste o declive moderado** que se observa en el per√≠odo m√°s reciente.
            *   **Estimaciones Futuras:**
                *   Para el curso **2025-2026**, el modelo estima una matr√≠cula que podr√≠a situarse en el rango de **195,000 a 215,000 estudiantes**.
                *   Hacia **2026-2027**, esta cifra podr√≠a descender hasta el entorno de los **185,000 a 190,000 estudiantes**.
            *   **Implicaci√≥n Estrat√©gica:** Si esta tendencia se materializa, plantea preguntas importantes para la planificaci√≥n: ¬øC√≥mo afectar√≠a esto a la capacidad instalada en las universidades? ¬øRequerir√≠a una reevaluaci√≥n de la asignaci√≥n de recursos o nuevas estrategias de captaci√≥n y retenci√≥n de estudiantes a nivel nacional?
            """))
            
            ask_ai_component(
                analysis_context="Forecast of overall national enrollment figures.",
                key="a6_proy_nacional", extra_data=[df_hist_nac, df_proy_nac],
                translation=ts.translate('ask_ai_component',{})
            )
        else:
            st.warning(ts.translate('A6_warning_national_proj_failed', "No se pudo generar la proyecci√≥n nacional. Estado: {status}").format(status=status_nac))
        
        st.markdown("---")

        st.subheader(ts.translate('A6_fig_A2_subheader', "Saberes del Ma√±ana: Proyecci√≥n por Rama de Ciencias"))
        with st.spinner(ts.translate('A6_fig_A2_spinner', "Calculando la proyecci√≥n por ramas de ciencias...")):
            df_hist_ramas, _, df_proy_ramas, n_anos_reg_ramas = analisis_A2(df_main, projection=True)
        
        if df_proy_ramas is not None and df_hist_ramas is not None:
            fig_proy_ramas = graficate_A2_evolucion(df_hist_ramas, ts, df_proy_ramas, n_anos_reg_ramas) #type:ignore
            st.plotly_chart(fig_proy_ramas, use_container_width=True, key="fig_a6_proy_ramas")
            ask_ai_component(
                analysis_context="Forecast of student enrollment by scientific discipline.",
                key="a6_proy_ramas", extra_data=[df_hist_ramas, df_proy_ramas],
                translation=ts.translate('ask_ai_component',{})
            )
        else:
            st.warning(ts.translate('A6_warning_branches_proj_failed', "No se pudo generar la proyecci√≥n por ramas."))

        st.markdown("---")

        st.subheader(ts.translate('A6_fig_A7_subheader_1', "Carreras Clave en el Horizonte: Proyecci√≥n Interactiva"))
        st.markdown(ts.translate('A6_fig_A7_markdown_1', "Selecciona hasta 3 carreras de tu inter√©s para visualizar su proyecci√≥n de matr√≠cula individual."))

        todas_carreras_sorted = sorted(df_main['carrera'].unique())
        default_carreras = []
        if todas_carreras_sorted:
            try:
                default_carreras = df_main.groupby('carrera')['matricula_total'].sum().nlargest(3).index.tolist()
            except Exception:
                default_carreras = todas_carreras_sorted[:min(3, len(todas_carreras_sorted))]

        carreras_seleccionadas = st.multiselect(
            ts.translate('A6_fig_A7_multiselect_1', "Selecciona carreras para proyectar:"),
            options=todas_carreras_sorted,
            default=default_carreras,
            max_selections=3,
            key="select_carreras_a6_proy"
        )

        if carreras_seleccionadas:
            with st.spinner(ts.translate('A6_fig_A7_spinner_1', "Calculando la proyecci√≥n para las carreras seleccionadas...")):
                df_proy_carreras, msg_proy = analisis_A6(df_main, carreras_seleccionadas=carreras_seleccionadas)
            
            show_info(msg_proy)

            if df_proy_carreras is not None and not df_proy_carreras.empty:
                fig_proy_carreras = graficate_A6_proyeccion_carreras(df_proy_carreras, ts)
                st.plotly_chart(fig_proy_carreras, use_container_width=True, key="fig_a6_proy_carreras_dinamica")
                
                ask_ai_component(
                    analysis_context=f"Projection for the degree programs: {', '.join(carreras_seleccionadas)}.",
                    key="a6_proy_carreras_" + "_".join(sorted([c.replace(' ', '_') for c in carreras_seleccionadas])),
                    extra_data=[df_proy_carreras],
                    translation=ts.translate('ask_ai_component',{})
                )
            else:
                st.warning(ts.translate('a7_proy_warning', "No se pudieron generar datos para la proyecci√≥n de: {careers}.").format(careers=', '.join(carreras_seleccionadas)))
        else:
            st.info(ts.translate('a7_void_info', "Selecciona al menos una carrera para ver su proyecci√≥n."))

        st.markdown(ts.translate('a7_end_markdown', """
        ---
        **Planificando con Visi√≥n de Futuro:**
        Estas proyecciones, con todas sus limitaciones, son un insumo valioso para:
        *   Anticipar necesidades de **infraestructura y profesorado**.
        *   Debatir sobre la **asignaci√≥n de plazas y recursos** entre diferentes √°reas y carreras.
        *   Identificar √°reas que podr√≠an requerir **estrategias proactivas** para revertir tendencias negativas o para gestionar un crecimiento sostenible.
        *   Fomentar un di√°logo informado sobre el **futuro de la oferta acad√©mica** en Cuba.
        """))

    if game_controller.game_mode:
        st.subheader(ts.translate('A6_game_subheader', "üîÆ El Or√°culo de la Matr√≠cula"))
        st.markdown(ts.translate('A6_game_intro', """
        Antes de revelar las proyecciones del modelo, pongamos a prueba tu intuici√≥n como analista.
        Observa la trayectoria hist√≥rica de la matr√≠cula nacional. Basado en esta tendencia,
        ¬øqu√© crees que ocurri√≥ en el √∫ltimo a√±o registrado? ¬øContinu√≥ la tendencia, se estabiliz√≥ o se revirti√≥?
        """))
        
        df_hist_juego, _, _, _ = analisis_A1(df_main)
        if df_hist_juego is not None and len(df_hist_juego) >= 2:
            game_data_oracle = pd.DataFrame([{
                "name": ts.translate('A6_game_item_name', "Matr√≠cula Nacional"),
                "x": df_hist_juego['ano_inicio_curso'].tolist(),
                "y": df_hist_juego['matricula_total'].tolist()
            }])

            OracleMinigame(
                game_id="A6_OracleNacional",
                game_title=ts.translate('A6_game_title', "Predice la Tendencia Nacional"),
                data=game_data_oracle,
                content_callback=render_content,
                min_score_for_victory=20
            ).render()
        else:
            render_content()
    else:
        render_content()

### Areas de Atenci√≥n
@st.fragment
def A7(df_main, game_controller: GameController, ts:Translator, **kwargs):
    st.header(ts.translate('A7_header_1', "üí° √Åreas de Atenci√≥n: Desaf√≠os y Oportunidades Espec√≠ficas"))
    st.markdown(ts.translate('A7_markdown_1', """
    M√°s all√° de las grandes tendencias, existen situaciones particulares en carreras y universidades
    que merecen una lupa especial. Algunas carreras pueden estar emergiendo con vigor, otras podr√≠an
    haber concluido su ciclo de oferta, y un tercer grupo quiz√°s lucha por atraer un n√∫mero suficiente
    de estudiantes. Identificar estos casos no es se√±alar problemas, sino descubrir oportunidades
    para una gesti√≥n acad√©mica m√°s precisa, √°gil y adaptada a las realidades cambiantes.
    """))
    st.markdown("---")

    def render_content():
        with st.spinner(ts.translate('A7_spinner_1', "Identificando casos de atenci√≥n espec√≠fica...")):
            df_nuevas, df_cesadas, df_baja, umbral, status = analisis_A7(df_main)
        
        if status != "success":
            st.warning(ts.translate('A7_error_a8_analysis', "No se pudo completar el an√°lisis de √°reas de atenci√≥n."))
            return

        st.subheader(ts.translate('A7_a8_subheader_1', "üå± Sembrando el Futuro: Posibles Nuevas Ofertas o Reactivaciones"))
        if df_nuevas is not None and not df_nuevas.empty:
            st.markdown(ts.translate('A7_a8_markdown_1', """
            El siguiente gr√°fico muestra cu√°ntas carreras nuevas o reactivadas se detectaron cada a√±o. 
            Esto revela los per√≠odos de mayor expansi√≥n o renovaci√≥n de la oferta acad√©mica.
            """))
            fig_nuevas = graficate_A7_nuevas_ofertas(df_nuevas.copy(), ts)
            st.plotly_chart(fig_nuevas, use_container_width=True)
            
            with st.expander(ts.translate('A7_expander_new_offers', "Ver la lista completa de las {count} nuevas ofertas detectadas").format(count=len(df_nuevas))):
                df_nuevas_display = df_nuevas.rename(columns={
                    'university': ts.translate('_university', 'Universidad'),
                    'career': ts.translate('_career', 'Carrera'),
                    'detected_start_year': ts.translate('A7_col_detected_start_year', 'A√±o Inicio Detectado'),
                    'current_enrollment': ts.translate('A7_col_current_enrollment', 'Matr√≠cula Actual')
                })
                st.dataframe(df_nuevas_display, use_container_width=True)

            ask_ai_component(
                analysis_context="Analysis of degree programs that appear to be new offerings or reactivations.",
                key="a7_nuevas_ofertas",
                extra_data=[df_nuevas],
                translation=ts.translate('ask_ai_component',{})
            )
        else:
            st.info(ts.translate('A7_info_no_new_offers', "No se identificaron carreras que cumplan claramente con el criterio de nueva oferta o reactivaci√≥n."))
        
        st.markdown("---")

        st.subheader(ts.translate('A7_a8_subheader_2', "üçÇ Ciclos que Concluyen: Posibles Ceses de Oferta"))
        if df_cesadas is not None and not df_cesadas.empty:
            st.markdown(ts.translate('A7_a8_markdown_2_revised', """
            Este gr√°fico resume cu√°ntas carreras dejaron de tener matr√≠cula por a√±o, d√°ndonos una idea 
            de los per√≠odos con mayores ajustes o discontinuaciones en la oferta acad√©mica.
            """))
            fig_cesadas = graficate_A7_cesadas_ofertas(df_cesadas.copy(), ts)
            st.plotly_chart(fig_cesadas, use_container_width=True)

            with st.expander(ts.translate('A7_expander_ceased_offers', "Ver la lista completa de las {count} ofertas posiblemente cesadas").format(count=len(df_cesadas))):
                df_cesadas_display = df_cesadas.rename(columns={
                    'university': ts.translate('_university', 'Universidad'),
                    'career': ts.translate('_career', 'Carrera'),
                    'last_enrollment_year': ts.translate('A7_col_last_enrollment_year', '√öltimo A√±o con Matr√≠cula')
                })

                st.dataframe(df_cesadas_display, use_container_width=True)

            ask_ai_component(
                analysis_context="Analysis of degree programs that seem to have been discontinued.",
                key="a7_cese_oferta",
                extra_data=[df_cesadas],
                translation=ts.translate('ask_ai_component',{})
            )
        else:
            st.info(ts.translate('A7_info_no_ceased_offers', "No se identificaron carreras que cumplan claramente con el criterio de cese de oferta."))
        
        st.markdown("---")
            
        curso_reciente = f"{int(df_main['ano_inicio_curso'].max())}-{int(df_main['ano_inicio_curso'].max()+1)}"
        
        st.subheader(ts.translate('A7_a8_subheader_3', "üìâ Focos de Atenci√≥n: Matr√≠cula Reducida (Inferior a {umbral})").format(umbral=umbral))
        if df_baja is not None and not df_baja.empty:
            st.markdown(ts.translate('A7_a8_markdown_3_revised', """
            El siguiente gr√°fico agrupa las carreras seg√∫n su nivel de matr√≠cula en el curso {curso}. Cada punto representa
            una carrera en una universidad espec√≠fica. Pasa el cursor sobre un punto para ver los detalles. 
            Esto nos ayuda a ver d√≥nde se concentran los casos de matr√≠cula m√°s cr√≠tica (ej. 1 o 2 estudiantes).
            """).format(curso=curso_reciente))
            
            fig_baja = graficate_A7_baja_matricula(df_baja.copy(), ts, curso_reciente, umbral)
            st.plotly_chart(fig_baja, use_container_width=True)

            with st.expander(ts.translate('A7_expander_low_enrollment', "Ver la lista completa de las {count} carreras con matr√≠cula baja").format(count=len(df_baja))):
                df_baja_display = df_baja.rename(columns={
                    'university': ts.translate('_university', 'Universidad'),
                    'career': ts.translate('_career', 'Carrera'),
                    'enrollment': ts.translate('A7_col_enrollment_last_year', 'Matr√≠cula ({curso})').format(curso=curso_reciente)
                })
                st.dataframe(df_baja_display, use_container_width=True)

            ask_ai_component(
                analysis_context=f"Analysis of degree programs with minimal enrollment in the most recent year (under {umbral} students).",
                key="a7_baja_matricula",
                extra_data=[df_baja],
                translation=ts.translate('ask_ai_component',{})
            )
        else:
            st.info(ts.translate('A7_info_no_low_enrollment', "No se identificaron carreras con matr√≠cula inferior a {umbral} (y >0) en el √∫ltimo a√±o.").format(umbral=umbral))

        st.markdown(ts.translate('A7_conclusion_markdown_1', """
        ---
        **Decisiones Informadas para una Gesti√≥n Proactiva:**
        La informaci√≥n presentada en esta secci√≥n es un llamado a la acci√≥n espec√≠fica:
        *   **Nuevas Ofertas / Reactivaciones:**
            *   **Verificar:** ¬øCorresponden a lanzamientos o reactivaciones planificadas?
            *   **Monitorear:** Evaluar su evoluci√≥n inicial, necesidades de recursos y estrategias de consolidaci√≥n.
            *   **Aprender:** ¬øResponden a una demanda social o laboral emergente que podr√≠a replicarse?
        *   **Posibles Ceses de Oferta:**
            *   **Confirmar:** ¬øLa discontinuaci√≥n es oficial y definitiva? Actualizar registros si es necesario.
            *   **Evaluar Impacto:** Si el cese no fue planificado o tiene implicaciones negativas (ej. √∫nica oferta en una regi√≥n), investigar causas.
        *   **Matr√≠cula Reducida:**
            *   **An√°lisis Causa-Ra√≠z:** ¬øSe trata de carreras altamente especializadas con demanda limitada por naturaleza? ¬øProblemas de captaci√≥n? ¬øDesactualizaci√≥n curricular? ¬øFalta de pertinencia laboral?
            *   **Estrategias Diferenciadas:** Dependiendo del diagn√≥stico, las acciones podr√≠an ir desde la promoci√≥n focalizada, redise√±o curricular, hasta la consideraci√≥n de fusi√≥n con otras carreras o, en √∫lti ma instancia, una discontinuaci√≥n planificada si no se justifica su mantenimiento.

        Una gesti√≥n atenta a estos detalles permite optimizar recursos, responder mejor a las necesidades
        del pa√≠s y asegurar la vitalidad y pertinencia de la oferta acad√©mica universitaria.
        """))

    if game_controller.game_mode:
        st.subheader(ts.translate('A7_game_subheader', "üïµÔ∏è‚Äç‚ôÇÔ∏è Encuentra el Foco de Atenci√≥n"))
        st.markdown(ts.translate('A7_game_intro', """
        Entre las m√∫ltiples ofertas acad√©micas de las universidades, algunas prosperan con cientos de estudiantes, mientras que otras luchan por mantenerse a flote. A continuaci√≥n, te presentamos cuatro ofertas universitarias. Tres de ellas tienen una matr√≠cula saludable, pero una es un "foco de atenci√≥n" con una matr√≠cula cr√≠ticamente baja. ¬øPuedes identificar al intruso?
        """))

        _, _, df_baja_game, umbral_game, status_game = analisis_A7(df_main)
        
        if status_game == 'success' and df_baja_game is not None and not df_baja_game.empty:
            ano_reciente = int(df_main['ano_inicio_curso'].max())
            df_reciente_game = df_main[df_main['ano_inicio_curso'] == ano_reciente]
            
            impostor = df_baja_game.sample(1).copy()
            impostor['category'] = 'Baja Matr√≠cula'
            impostor['item'] = impostor['university'] + ' - ' + impostor['career']
            
            df_saludable = df_reciente_game[df_reciente_game['matricula_total'] >= 50].sample(3)
            df_saludable['category'] = 'Matr√≠cula Saludable'
            df_saludable['item'] = df_saludable['entidad'] + ' - ' + df_saludable['carrera']
            
            game_data = pd.concat([
                impostor[['item', 'category']],
                df_saludable[['item', 'category']]
            ])
            
            impostor_game_A7 = ImpostorMinigame(
                game_id="A7_ImpostorMatriculaBaja",
                game_title=ts.translate('A7_game_title', "El Intruso de Matr√≠cula Baja"),
                data=game_data,
                item_col='item',
                category_col='category',
                exclude_if_contains=False,
                content_callback=render_content,
                min_score_for_victory=25
            )
            impostor_game_A7.render()
        else:
            render_content()
    else:
        render_content()

### A6: Perfil Detallado de Carreras
@st.fragment
def B1(df_main, game_controller: GameController, ts:Translator, **kwargs):
    st.header(ts.translate('B1_header_1', "üî¨ Playground: Perfil Detallado de Carrera"))
    st.markdown(ts.translate('B1_markdown_1', """
    Sum√©rgete en los detalles de la carrera que elijas. Descubre su evoluci√≥n hist√≥rica,
    su tasa de crecimiento, y un panorama anual de las universidades y la composici√≥n de g√©nero.
    """))

    todas_carreras = sorted(df_main['carrera'].unique())
    carrera_sel = st.selectbox(
        ts.translate('B1_selectbox_label_1', "Selecciona una Carrera para analizar su perfil:"),
        options=todas_carreras,
        index=todas_carreras.index("MEDICINA") if "MEDICINA" in todas_carreras else 0,
        key="sel_carrera_b1_perfil"
    )

    if not carrera_sel:
        st.info(ts.translate('b1_info_select_career', "Por favor, selecciona una Carrera para continuar."))
        return

    st.markdown("---")
    
    with st.spinner(ts.translate('B1_spinner_1_hist', "Generando perfil hist√≥rico para {career}...").format(career=carrera_sel)):
        df_evol_genero, rama, status_hist = analisis_perfil_carrera_historico(df_main, carrera_sel)

    if status_hist != "success" or df_evol_genero is None:
        st.warning(f"No se pudo generar el perfil para {carrera_sel}. Estado: {status_hist}")
        return

    st.subheader(ts.translate('B1_subheader_1_hist', "Evoluci√≥n y Crecimiento de: {career}").format(career=carrera_sel))
    st.markdown(f"**{ts.translate('B1_markdown_1_rama', 'Rama de Ciencias')}:** `{rama or 'N/D'}`")

    if not df_evol_genero.empty:
        fig_evol = graficate_B1_evolucion_genero(df_evol_genero, ts, carrera_sel)
        st.plotly_chart(fig_evol, use_container_width=True)
        
        df_cagr_data = df_evol_genero[['ano_inicio_curso', 'matricula_total']]
        anos_disponibles = sorted(df_cagr_data['ano_inicio_curso'].unique())
        if len(anos_disponibles) >= 2:
            start_year_cagr, end_year_cagr = st.select_slider(
                ts.translate('B1_slider_label_cagr', "Selecciona el rango de a√±os para el c√°lculo del CAGR:"),
                options=anos_disponibles, value=(anos_disponibles[0], anos_disponibles[-1])
            )
            cagr_info = calcular_cagr(df_cagr_data, start_year_cagr, end_year_cagr)
            if cagr_info.get("status") == "SUCCESS":
                st.metric(label=f"CAGR ({start_year_cagr}-{end_year_cagr})", value=f"{cagr_info.get('cagr_value', 0.0) * 100:.2f}%")
    else:
        st.info(ts.translate('B1_info_no_evolution_data', "No hay datos de evoluci√≥n disponibles para esta carrera."))

    st.markdown("---")

    st.subheader(ts.translate('B1_subheader_2_snapshot', "An√°lisis Anual Detallado"))
    
    anos_disponibles_snapshot = sorted(df_evol_genero['ano_inicio_curso'].unique())
    anio_sel = st.select_slider(
        ts.translate('B1_slider_label_snapshot', "Selecciona un a√±o para ver los detalles:"),
        options=anos_disponibles_snapshot,
        value=anos_disponibles_snapshot[-1] if anos_disponibles_snapshot else None
    )

    if anio_sel:
        with st.spinner(ts.translate('B1_spinner_2_snapshot', "Cargando datos para el a√±o {year}...").format(year=anio_sel)):
            df_unis, datos_genero, status_snap = analisis_perfil_carrera_snapshot(df_main, carrera_sel, anio_sel)
        
        if status_snap == "success":
            col_genero, col_unis = st.columns(2, gap="large")
            with col_genero:
                if datos_genero and datos_genero.get('Total', 0) > 0:
                    fig_pie_genero = graficate_B1_distribucion_genero(datos_genero, ts, carrera_sel, anio_sel)
                    st.plotly_chart(fig_pie_genero, use_container_width=True)
                else:
                    st.info(ts.translate('B1_info_no_gender_data_pie', "Sin datos de g√©nero para este a√±o."))
            with col_unis:
                if df_unis is not None and not df_unis.empty:
                    fig_bar_unis = graficate_B1_distribucion_unis(df_unis, ts, carrera_sel)
                    st.plotly_chart(fig_bar_unis, use_container_width=True)
                else:
                    st.info(ts.translate('b1_info_no_universities_data_year', "Ninguna universidad registr√≥ matr√≠cula en este a√±o."))
        else:
            st.warning(ts.translate('b1_warning_no_data_for_year', "No se encontraron datos para la carrera '{career}' en el a√±o {year}.").format(career=carrera_sel, year=anio_sel))

    st.markdown("---")
    ask_ai_component(
        analysis_context=f"Detailed profile of the degree program: {carrera_sel}. Snapshot year: {anio_sel or 'N/A'}.",
        key=f"b1_perfil_carrera_{carrera_sel.replace(' ','_')}",
        extra_data=[df_evol_genero, df_unis, datos_genero],
        translation=ts.translate('ask_ai_component', {})
    )

### A6: Gu√≠a Instituciones
@st.fragment
def B2(df_main, df_ins, game_controller: GameController, ts:Translator, **kwargs):
    st.header(ts.translate('b2_header', "üó∫Ô∏è Gu√≠a de Instituciones: Explora la Oferta Acad√©mica por Localidad"))
    st.markdown(ts.translate('b2_intro', """
    Descubre las instituciones de educaci√≥n superior en Cuba, filtrando por provincia y municipio.
    Para cada universidad, encontrar√°s informaci√≥n general y la oferta acad√©mica por ramas y carreras
    en el a√±o que selecciones.
    """))

    if df_ins.empty:
        st.error(ts.translate('b2_error_no_institutions_data', "Los datos de instituciones no est√°n disponibles. Esta secci√≥n no puede mostrarse."))
        return
    if df_main.empty:
        st.error(ts.translate('b2_error_no_enrollment_data', "Los datos de matr√≠cula no est√°n disponibles. La informaci√≥n de oferta ser√° limitada."))
        
    st.subheader(ts.translate('b2_subheader_filters', "Filtros de B√∫squeda:"))
    col_filtro1, col_filtro2 = st.columns(2)

    all_provinces_text = ts.translate('_all_provinces', "TODAS LAS PROVINCIAS")
    all_municipalities_text = ts.translate('_all_municipalities', "TODOS LOS MUNICIPIOS")

    with col_filtro1:
        provincias_disponibles = [all_provinces_text] + sorted(df_ins['provincia'].unique().tolist())
        provincia_sel = st.selectbox(
            ts.translate('b2_label_province', "Provincia:"),
            options=provincias_disponibles,
            key="sel_prov_b2_guia"
        )

    with col_filtro2:
        municipios_disponibles = [all_municipalities_text]
        if provincia_sel != all_provinces_text:
            municipios_de_provincia = sorted(df_ins[df_ins['provincia'] == provincia_sel]['municipio'].unique().tolist())
            municipios_disponibles.extend(municipios_de_provincia)

        municipio_sel = st.selectbox(
            ts.translate('b2_label_municipality', "Municipio:"),
            options=municipios_disponibles,
            key="sel_mun_b2_guia",
            disabled=(provincia_sel == all_provinces_text)
        )

    pattern_sel = st.text_input(
        ts.translate('b2_label_search_pattern', "Buscar por nombre o sigla de instituci√≥n (filtro visual):"),
        key="sel_patron_b2"
    )
    st.markdown("---")

    provincia_para_filtrar = None if provincia_sel == all_provinces_text else provincia_sel
    municipio_para_filtrar = None if municipio_sel == all_municipalities_text else municipio_sel

    with st.spinner(ts.translate('b2_spinner_loading', "Cargando gu√≠a de instituciones...")):
        df_guia_basic, curso_reciente_str_basic, status_basic = analisis_guia_universidades_basic(
            df_instituciones=df_ins,
            df_matricula=df_main,
            provincia_seleccionada=provincia_para_filtrar,
            municipio_seleccionado=municipio_para_filtrar
        )
    
    if status_basic != "success" or df_guia_basic is None:
        st.warning(ts.translate('b2_warning_basic_analysis_failed', "No se pudo cargar la lista b√°sica de instituciones. Estado: {status}").format(status=status_basic))
        return

    df_guia_filtrado_nombre = df_guia_basic
    if pattern_sel:
        df_guia_filtrado_nombre = df_guia_basic[
            df_guia_basic['nombre_institucion'].str.contains(pattern_sel, case=False, na=False) |
            df_guia_basic['sigla_institucion'].str.contains(pattern_sel, case=False, na=False)
        ]
    
    n_mostradas = df_guia_filtrado_nombre['nombre_institucion'].nunique()
    n_totales = df_guia_basic['nombre_institucion'].nunique()
    
    st.info(ts.translate(
        'b2_info_showing_unis',
        "Mostrando {shown} de {total} instituci√≥n(es) ({last_year})."
    ).format(shown=n_mostradas, total=n_totales, last_year=curso_reciente_str_basic))

    anos_disponibles_matricula = sorted(df_main['ano_inicio_curso'].unique().tolist())
    if not anos_disponibles_matricula:
        st.warning(ts.translate('b2_warning_no_years_for_detail', "No hay a√±os de matr√≠cula disponibles para ver detalles."))
        return
        
    ano_seleccionado_detalle = st.select_slider(
        ts.translate('b2_slider_year_detail', "Selecciona el a√±o para ver la oferta acad√©mica detallada:"),
        options=anos_disponibles_matricula,
        value=anos_disponibles_matricula[-1],
        key="slider_uni_detail_year"
    )
    curso_seleccionado_detalle_str = f"{ano_seleccionado_detalle}-{ano_seleccionado_detalle+1}" #type:ignore
    
    if df_guia_filtrado_nombre.empty:
        st.info(ts.translate('b2_info_no_unis_matched_filters', "No se encontraron instituciones que coincidan con los filtros aplicados."))
    else:

        for nombre_uni, df_uni_row in df_guia_filtrado_nombre.iterrows():
            title_expander = f"üèõÔ∏è {df_uni_row['nombre_institucion']} ({df_uni_row['sigla_institucion']})"
            detalles_loc_exp = [d for d in [df_uni_row.get('municipio'), df_uni_row.get('provincia')] if d]
            if detalles_loc_exp:
                title_expander += f" | {', '.join(detalles_loc_exp)}"
            if pd.notna(df_uni_row.get('ano_creacion')):
                title_expander += f" ({ts.translate('_founded_in', 'Fundada en')} {int(df_uni_row['ano_creacion'])})"
            
            with st.expander(title_expander):
                col_info_basica, col_genero_pastel_uni = st.columns([2, 1])
                #st.markdown(datetime.fromtimestamp(time()).strftime('%Y-%m-%d %H:%M:%S'))
                with col_info_basica:
                    st.markdown(f"**{ts.translate('_organism', 'Organismo')}:** `{df_uni_row.get('organismo', 'N/D')}`")
                    st.markdown(f"**{ts.translate('_address', 'Direcci√≥n')}:** *{df_uni_row.get('direccion_fisica', 'N/D')}*")
                    st.markdown(f"**{ts.translate('_main_modality', 'Modalidad Principal')}:** `{df_uni_row.get('modalidad_estudio', 'N/D')}`")
                
                df_oferta_uni, datos_genero_uni, status_offer = get_uni_academic_offer(
                    df_main, df_uni_row['sigla_institucion'], ano_seleccionado_detalle #type:ignore
                )

                with col_genero_pastel_uni:
                    if status_offer == "success" and datos_genero_uni and datos_genero_uni.get('Total', 0) > 0:
                        fig_pie_genero_uni = graficate_B2_distribucion_genero_uni(datos_genero_uni, ts, curso_seleccionado_detalle_str)
                        st.plotly_chart(fig_pie_genero_uni, use_container_width=True)
                    else:
                        st.caption(ts.translate('b2_caption_no_gender_data_for_year', "Sin datos de g√©nero disponibles para {curso}.").format(curso=curso_seleccionado_detalle_str))
                
                st.markdown("---")
                st.markdown(ts.translate('b2_markdown_academic_offering', "**Oferta Acad√©mica ({curso}, ramas y carreras con matr√≠cula):**").format(curso=curso_seleccionado_detalle_str))

                if status_offer == "success" and df_oferta_uni is not None and not df_oferta_uni.empty:
                    for nombre_rama, df_rama_group in df_oferta_uni.groupby('rama_ciencias', sort=False):
                        st.markdown(f"##### <span style='color: #1E90FF;'>‚ñ∫</span> {nombre_rama}", unsafe_allow_html=True)
                        
                        df_display = df_rama_group[['carrera', 'Matricula_Carrera_Anio']].rename(columns={
                            'carrera': ts.translate('_career', 'Carrera'),
                            'Matricula_Carrera_Anio': ts.translate('_enrollment', 'Matr√≠cula')
                        }).set_index(ts.translate('_career', 'Carrera'))
                        
                        st.dataframe(df_display, use_container_width=True)
                else:
                    st.info(ts.translate('b2_info_no_branches_for_year', "Esta instituci√≥n no tiene ramas de ciencias con oferta activa o carreras con matr√≠cula reportada para {curso}.").format(curso=curso_seleccionado_detalle_str))
    
    st.markdown('---')
    ask_ai_component(
        analysis_context=f"Analysis of the institutions guide. Applied filters ‚Äî Province: {provincia_sel}, Municipality: {municipio_sel}, Year: {ano_seleccionado_detalle}.",
        key="b2_guia_instituciones",
        extra_data=[df_guia_filtrado_nombre],
        translation=ts.translate('ask_ai_component', {})
    )

### Conclusiones
@st.fragment
def conclusion(game_controller: GameController, ts:Translator, **kwargs):
    st.header(ts.translate('conclusion_header', "üèÅ Conclusiones y Horizontes Futuros: Forjando la Universidad del Ma√±ana"))
    st.markdown(ts.translate('conclusion_intro', """
    Hemos viajado a trav√©s de una d√©cada de datos, explorando el complejo ecosistema
    de la educaci√≥n superior en Cuba. Ya sea como analista o como explorador, cada gr√°fico desbloqueado y cada desaf√≠o superado 
    ha sido una pieza de un rompecabezas m√°s grande: la historia de miles de aspiraciones, de esfuerzos institucionales
    y de la incesante b√∫squeda del conocimiento que define a nuestra naci√≥n.

    Este an√°lisis no es un punto final, sino un faro que ilumina el camino recorrido y nos ayuda
    a discernir los senderos que se abren ante nosotros.
    """))
    st.success(ts.translate(
        'conclusion_success_message',
        "**La informaci√≥n es poder, y el poder de estos datos reside en nuestra capacidad para transformarlos en acci√≥n sabia y visi√≥n estrat√©gica.**"
    ))
    st.markdown("---")

    st.subheader(ts.translate('conclusion_findings_subheader', "üåü Destellos del Viaje: Principales Hallazgos"))
    hallazgos_text = ts.translate('conclusion_findings_text', """
    Al mirar atr√°s en nuestro an√°lisis, emergen varios faros que gu√≠an nuestra comprensi√≥n:

    1.  **El Pulso Din√°mico de la Naci√≥n:** La matr√≠cula universitaria nacional ha mostrado una notable capacidad de expansi√≥n, alcanzando picos significativos a principios de la d√©cada de 2020, seguida de una fase de ajuste m√°s reciente. Esta fluctuaci√≥n nos recuerda la sensibilidad del sistema a factores contextuales y la necesidad de una planificaci√≥n flexible. *(Ref. Secci√≥n 1)*

    2.  **El Coraz√≥n M√©dico y el Alma Pedag√≥gica:** Las **Ciencias M√©dicas** se consolidan como la columna vertebral en t√©rminos de volumen estudiantil, un testimonio de su importancia estrat√©gica. Las **Ciencias Pedag√≥gicas**, por su parte, han demostrado un dinamismo extraordinario, con un crecimiento masivo seguido de una contracci√≥n, reflejando posibles cambios en la demanda o en las pol√≠ticas de formaci√≥n docente. *(Ref. Secci√≥n 2)*

    3.  **El Ascenso de Nuevas Vocaciones:** El an√°lisis de crecimiento (CAGR) ha revelado el despegue impresionante de carreras como **Servicios Estomatol√≥gicos** y el vigor de varias **Ingenier√≠as** (Art√≠stica, Procesos Agroindustriales, Inform√°tica), se√±alando posibles nuevas fronteras de inter√©s y demanda laboral. *(Ref. Secci√≥n 3)*

    4.  **Avances y Desaf√≠os en la Equidad de G√©nero:** Si bien Cuba exhibe una alta participaci√≥n femenina en la educaci√≥n superior, con muchas ramas y carreras mostrando una mayor√≠a de mujeres, persisten desaf√≠os significativos. La subrepresentaci√≥n femenina en las **Ciencias T√©cnicas** e **Ingenier√≠as espec√≠ficas**, as√≠ como en **Ciencias de la Cultura F√≠sica y el Deporte**, nos llama a redoblar esfuerzos para construir un panorama verdaderamente equitativo. *(Ref. Secci√≥n 4)*

    5.  **La Riqueza de la Diversidad Institucional:** Cada universidad aporta su matiz √∫nico al sistema. Hemos visto desde grandes centros multidisciplinarios hasta instituciones con una marcada especializaci√≥n (como las Universidades de Ciencias M√©dicas). La identificaci√≥n de carreras con oferta limitada subraya la importancia de una red universitaria coordinada y estrat√©gicamente distribuida. *(Ref. Secci√≥n 5)*

    6.  **Una Mirada Prudente al Ma√±ana:** Las proyecciones, aunque sujetas a la incertidumbre inherente al futuro, sugieren una posible continuaci√≥n de la fase de ajuste en la matr√≠cula general y en varias ramas y carreras clave. Esto no es un augurio, sino una invitaci√≥n a la preparaci√≥n y a la acci√≥n proactiva. *(Ref. Secci√≥n 6)*

    7.  **La Importancia de los Detalles:** El an√°lisis de "√Åreas de Atenci√≥n" nos ha recordado que la salud del sistema tambi√©n reside en la vitalidad de cada uno de sus componentes, incluyendo las carreras emergentes, aquellas con matr√≠cula reducida o las que podr√≠an estar concluyendo su ciclo. *(Ref. Secci√≥n 7)*
    """)
    st.markdown(hallazgos_text)
    st.markdown("---")

    st.subheader(ts.translate(
        'conclusion_recommendations_subheader',
        "üß≠ Trazando la Carta de Navegaci√≥n: Recomendaciones Estrat√©gicas"
    ))

    recomendaciones_text = ts.translate('conclusion_recommendations_text', """
    Con estos hallazgos como br√∫jula, proponemos las siguientes l√≠neas de acci√≥n para la Sede Central
    y todos los actores involucrados en la Educaci√≥n Superior cubana:

    *   **Fortalecer el Observatorio de la Educaci√≥n Superior:**
        *   **Acci√≥n:** Mantener y enriquecer este sistema de an√°lisis de datos como una herramienta permanente para el monitoreo de tendencias, la evaluaci√≥n de pol√≠ticas y la toma de decisiones informadas.
        *   **Impacto Esperado:** Mayor agilidad y capacidad de respuesta del sistema a las din√°micas cambiantes.

    *   **Fomentar la Pertinencia y la Calidad con Visi√≥n de Futuro:**
        *   **Acci√≥n:** Realizar estudios prospectivos continuos sobre las necesidades del desarrollo socioecon√≥mico del pa√≠s y las demandas del mercado laboral para alinear la oferta acad√©mica. Evaluar y actualizar los planes de estudio de carreras con baja demanda o decrecimiento, e invertir en aquellas con potencial de crecimiento y relevancia estrat√©gica.
        *   **Impacto Esperado:** Egresados mejor preparados para los desaf√≠os del futuro y una mayor contribuci√≥n de la universidad al desarrollo nacional.

    *   **Impulsar la Equidad de G√©nero en Todas las Disciplinas:**
        *   **Acci√≥n:** Dise√±ar e implementar programas espec√≠ficos y sostenidos para incentivar la participaci√≥n femenina en carreras STEM y otras √°reas subrepresentadas, y viceversa, abordando estereotipos desde etapas tempranas de la educaci√≥n.
        *   **Impacto Esperado:** Un sistema universitario m√°s inclusivo que aproveche el talento de toda la poblaci√≥n sin sesgos de g√©nero.

    *   **Optimizar la Red Universitaria y Promover la Colaboraci√≥n:**
        *   **Acci√≥n:** Utilizar los an√°lisis de especializaci√≥n y distribuci√≥n para tomar decisiones sobre la apertura, fusi√≥n o cierre de carreras en diferentes instituciones, buscando la eficiencia, la calidad y la cobertura territorial equitativa. Fomentar la creaci√≥n de redes de conocimiento y programas interuniversitarios.
        *   **Impacto Esperado:** Un sistema m√°s cohesionado, con centros de excelencia fortalecidos y una mejor utilizaci√≥n de los recursos disponibles.

    *   **Integrar la Voz de los Actores:**
        *   **Acci√≥n:** Complementar los an√°lisis cuantitativos con investigaciones cualitativas que recojan las percepciones y experiencias de estudiantes, profesores, egresados y empleadores.
        *   **Impacto Esperado:** Decisiones m√°s hol√≠sticas y pol√≠ticas mejor adaptadas a las realidades y expectativas de la comunidad universitaria y la sociedad.
    """)
    st.markdown(recomendaciones_text)
    st.markdown("---")
        
    st.header(ts.translate('conclusion_final_header', "‚ú® Un Legado Continuo, Un Futuro Brillante"))
    st.markdown(ts.translate('conclusion_final_paragraph', """
    El an√°lisis de estos datos no es meramente un ejercicio acad√©mico; es un acto de responsabilidad
    y un compromiso con el futuro. Las Universidades Cubanas, cada una con su rica historia y su papel trascendental
    en la sociedad, tiene ante s√≠ el desaf√≠o y la oportunidad de seguir evolucionando, adapt√°ndose
    e innovando.
    
    Esperamos que estos datos los inspire a todos a trabajar juntos por una educaci√≥n
    superior que no solo responda a las necesidades del presente, sino que activamente modele
    un ma√±ana m√°s pr√≥spero, justo y lleno de conocimiento para todos los j√≥venes Cubanos.
    """))

    if 'balloons_shown' not in st.session_state:
        st.session_state.balloons_shown = True
        st.balloons()
    
    context_conclusion_ia = (
        "This is the conclusions and final recommendations section of the analysis on higher education in Cuba. "
        "Below are the main findings and the strategic recommendations derived from the data. "
        "Your role is to discuss these points, offer additional perspectives, or respond to questions about these conclusions."
        "\n\n--- MAIN FINDINGS ---\n"
        f"{hallazgos_text}"
        "\n\n--- STRATEGIC RECOMMENDATIONS ---\n"
        f"{recomendaciones_text}"
    )

    ask_ai_component(
        analysis_context=context_conclusion_ia,
        key="final_conclusions",
        translation=ts.translate('ask_ai_component',{})
    )